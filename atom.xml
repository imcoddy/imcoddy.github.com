<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Q小帝的折腾笔记]]></title>
  <subtitle><![CDATA[记录下那些折腾过的岁月。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://imcoddy.github.io/"/>
  <updated>2016-02-01T13:24:45.000Z</updated>
  <id>http://imcoddy.github.io/</id>
  
  <author>
    <name><![CDATA[Qiu Di]]></name>
    <email><![CDATA[imcoddy[#]gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Japanese Goods Guide For Parents]]></title>
    <link href="http://imcoddy.github.io/2016/02/01/japanese-goods-guide-for-parents/"/>
    <id>http://imcoddy.github.io/2016/02/01/japanese-goods-guide-for-parents/</id>
    <published>2016-02-01T09:29:00.000Z</published>
    <updated>2016-02-01T13:24:45.000Z</updated>
    <content type="html"><![CDATA[<h1 id="岛国回家购物指南">岛国回家购物指南</h1><p><img src="http://ntdimg.com/pic/2013/8-16/p3770162a632161382.jpg" alt="japanese-gifts"></p>
<p>说起来，好几年没有和家人一起过年了。由于最近有年假要消化，加上发现过年回家的机票还很便宜，于是临时决定回家陪陪父母。由于决定仓促，加上之前几次回国也陆续买过不少岛国产品。这次在朋友圈里随口一问，倒也得到不少新启发，现整理成文，以飨读者。</p>
<a id="more"></a>
<h2 id="物品清单">物品清单</h2><p>尽管岛国近来经济不济，但岛国的物品在总体上还是可圈可点。大件的物品虽然价格较高但质量可靠，小件物品则常在便利性上独具匠心。总体来说，大概可以分为以下的几类：</p>
<h3 id="家居类">家居类</h3><ul>
<li>电饭煲</li>
<li>净水器</li>
<li>不粘锅</li>
<li>腰部按摩仪</li>
<li>电风扇</li>
<li>空气净化器</li>
<li>马桶盖</li>
<li>扫地机器人</li>
<li>各类厨房清洁用品（百元店时找灵感）</li>
</ul>
<h3 id="数码产品">数码产品</h3><ul>
<li>iPad (Wifi 版）</li>
<li>iPhone（无锁版）</li>
<li>Macbook（英式键盘）</li>
<li>Kindle/Sony DPT S1 电子阅读器</li>
<li>PS4/Wii U/3DS 电子游戏机</li>
<li>数码相机/单反/微单</li>
<li>电子辞典</li>
</ul>
<h3 id="衣物类">衣物类</h3><ul>
<li>保暖内衣</li>
<li>羽绒服</li>
<li>日式西装</li>
<li>手套</li>
<li>袜子</li>
<li>围巾/围脖</li>
</ul>
<h3 id="保健物品类">保健物品类</h3><ul>
<li>风湿药/风湿发热贴</li>
<li>肠胃药</li>
<li>感冒药</li>
<li>眼药水</li>
<li>酵素</li>
<li>软骨素</li>
<li>维生素</li>
<li>鱼油</li>
<li>降压茶/大麦茶</li>
<li>护膝</li>
</ul>
<h3 id="食品类">食品类</h3><ul>
<li>巧克力</li>
<li>日式糕点</li>
<li>日本大米</li>
<li>味增汤</li>
<li>海鲜罐头</li>
<li>香烟（机场免税店）</li>
<li>日式清酒（机场免税店）</li>
</ul>
<h3 id="生活用品类">生活用品类</h3><ul>
<li>日式茶具</li>
<li>指甲剪（带放大镜）</li>
<li>京瓷菜刀/水果刀/瓜刨</li>
<li>保温杯</li>
<li>盐分计</li>
<li>体温计</li>
<li>血压计</li>
<li>电动剃须刀</li>
<li>热水袋</li>
<li>手表</li>
<li>口罩</li>
<li>蒸汽眼罩</li>
</ul>
<h3 id="化妆品类">化妆品类</h3><ul>
<li>面膜</li>
<li>雪肌精</li>
<li>爽肤水</li>
<li>洗面奶</li>
<li>染发剂</li>
<li>发腊</li>
</ul>
<h3 id="其它">其它</h3><p>最近人民币贬值，带日元回去可以显得值钱一点了……</p>
<p>岛国也是一个有着自己独特文化的国家，相关的周边产品也是数不胜数。不过像 AKB48 CD 写真或者动漫手办神马的，由于各人品味不同差异太大，这里就不展开了。</p>
<p>还有很多人回复应该带个男/女朋友或者是孙子回去，这或许是父母对于我们这样身处他乡的人最关心的事情了吧。其实除了大淘宝有租友回家过年的服务之外，在晚婚化严重的岛国也有「彼氏レンタル」这样的类似服务。不过这篇既然写的是购物指南，贩人的事情就不在这提了。总之，缘分的事情勉强不来，不过自己也的确需要努力一点了 &gt;_&lt;</p>
<h2 id="注意事项">注意事项</h2><ol>
<li>购买电脑的时候需要注意是否是英文键盘，要不回去后容易抓狂。</li>
<li>购买电器的时候，需要注意电压是否是宽频的，如果只是针对岛国的 110v 电压的话回去接上电源就要悲剧啦。</li>
<li>回国时需要转机的话，有可能在机场买的酒类饮品是无法带进机舱。</li>
<li>关于化妆品的选购，请向各位使用过的妹纸们咨询……</li>
</ol>
<p>暂先整理这些吧，其它的想到后再更新了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="岛国回家购物指南">岛国回家购物指南</h1><p><img src="http://ntdimg.com/pic/2013/8-16/p3770162a632161382.jpg" alt="japanese-gifts"></p>
<p>说起来，好几年没有和家人一起过年了。由于最近有年假要消化，加上发现过年回家的机票还很便宜，于是临时决定回家陪陪父母。由于决定仓促，加上之前几次回国也陆续买过不少岛国产品。这次在朋友圈里随口一问，倒也得到不少新启发，现整理成文，以飨读者。</p>]]>
    
    </summary>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Japan" scheme="http://imcoddy.github.io/tags/japan/"/>
    
      <category term="Life" scheme="http://imcoddy.github.io/tags/life/"/>
    
      <category term="Shopping" scheme="http://imcoddy.github.io/tags/shopping/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[International Trade With Bitcoin]]></title>
    <link href="http://imcoddy.github.io/2016/01/02/international-trade-with-bitcoin/"/>
    <id>http://imcoddy.github.io/2016/01/02/international-trade-with-bitcoin/</id>
    <published>2016-01-02T05:56:00.000Z</published>
    <updated>2016-01-02T07:46:01.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://s3.amazonaws.com/main-newsbtc-images/2015/04/ACCEPTING-BITCOIN-101.png" alt="bitcoin-accept"></p>
<p>在自己的眼中，2015 年的比特币的表现显得平淡了许多。的确，经历过了币价从 8000 跳到 900 的日子后，后边的这种小波动基本都看不入眼里了。而随着币价低迷，整个圈子都处于行业寒冬，尽管最近稍有了些春天的气息。<br><a id="more"></a></p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/spring-coming_zpss80a9qvg.png" alt="spring-coming"></p>
<p>在这样的日子里面，除了定期的买买提之外，仿佛能提的东西也不多了。毕竟，比特币离现实的生活还是太远了，直到最近，忽然想买一件东西的时候，让我想着尝试用比特币去实践一把。</p>
<h2 id="起因">起因</h2><p>事情是这样的：2015 年 10 月底，Barnes &amp; Noble 推出了新款的 Nook Glowlight Plus。作为一个喜欢读书而不喜欢 Kindle 的 Nook 爱好者，这样的消息对我而言是让人十分动心的：新设备不仅带来了硬件上的提升，系统也采用了 Android 4.4，从而可以安装更丰富的应用。同时，新设备可以达到生活防水级别，这意味着平时泡澡的时候也可以享受阅读的愉悦了！</p>
<p><img src="http://cdn.tokyotimes.com/wp-content/uploads/2014/08/you-bumi-reading-book-cover-bath-bag-1.jpg" alt="bath-reading"></p>
<p>唯一的问题是：这货只在美国地区发售。</p>
<p>在确认了近期没有人要去美帝之后，海淘则成为了剩下的最后选择。于是便自己动手，开始折腾起来。</p>
<p><img src="http://www.haitaoshen.com/uploads/allimg/150611/144320I39-0.jpg" alt="haitao"></p>
<h2 id="Newegg/TigerDirect">Newegg/TigerDirect</h2><p>Newegg 和 TigerDirect 作为早期接受比特币支付的电商，当年引起了一阵不小的轰动。既然要想用比特币购物，自然先想到的是到这两个网站上看看。</p>
<p>不过现实是非常骨感的。或许是读书本来就是一项小资运动，又或许是 Nook 的名气远远不及 Kindle，再或许是新品刚宣布厂商还没有进货。总之结果只有两个字：没货。</p>
<p><img src="http://www.tupian1.com/uploads/allimg/140624/1-140624011041.jpg" alt="no-stock-in"></p>
<p>看起来，除了官网就只有 Amazon 和 eBay 上有卖了。没办法，只好转战 Amazon。</p>
<h2 id="Gyft">Gyft</h2><p>因为在美帝的 Amazon 里面有些 Gift Cards，我便想起了 Gyft 网站。Gyft 顾名思义，就是一个提供各种 Gift Card 的兑换网站。而且对于每个新注册的用户，它还将赠送 $5 的礼品卡。</p>
<p><img src="https://h2savecom.files.wordpress.com/2015/02/screen-shot-2015-02-12-at-6-08-33-am.png?w=585&amp;h=239" alt="gyft-new-user-promo"></p>
<p>各位看到有免费的钱拿是不是很心动呀？是不是屁颠屁颠地跑去注册啦？事实证明这钱并不是这么容易拿滴！当你注册后并想使用它赠送的五美刀时，总是会提示失败。因为它需要对用户进行实名认证，如果你不提交自己的护照进行证明的话，就没有办法正常使用它的服务！</p>
<p>在折腾了一阵子还是没有结果之外，在 Gyft 上换点卡的打算就这样彻底打消了。</p>
<h2 id="Purse-io">Purse.io</h2><p><img src="https://shapeshift.io/site/sites/default/files/styles/blog_thumb/public/Purse.io%20integration.png?itok=GmTGbP5F" alt="purse-io"></p>
<p>Purse.io 的模式其实是一个很不错的尝试：你有 Gift Card 想换现金，我有比特币想换物品。Purse.io 则在中间进行撮和，然后从中提取部分差额当作手续费。</p>
<p>客观地说，这个商业模式是非常聪明的。就像我有着 Amazon Gift Card 却无法使用一样，确实会有人愿意以相对低廉一些的价格来将手中的 Gift Card 出售，以换取现金直接使用。</p>
<p>不过认真看一下它的价格之后，发现坑也还是不少的。按 50000 日元来算的话，这价格差居然超过 20%！我终于明白为什么这货之前能给出 20% off 的折扣了……<br><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/purse-io-bidding_zps2ka4h4hk.png" alt="purse-io-bidding"></p>
<p>更关键的是，一个多月前币价虽然刚稍有起色，但里面的配单速度很慢。在经历了一阵子没能成交之后，Purse.io 也被我放弃了。</p>
<h2 id="Barnes_&amp;_Noble">Barnes &amp; Noble</h2><p>正所谓峰回路转，柳暗花明。在这时候黑五来临，官网居然降价了！</p>
<p><img src="http://img1.imagesbn.com/pImages/nook/landing/2015-cybermonday/LP_cy-mo_sale_99_topPod_M_c.png" alt="ngp-sale"></p>
<p>相对前面的尝试的各种坑，直接在官网上购买要显得便利多了。于是怪止注册，下单，在填写住址时发现支持直邮，便兴冲冲地填写了现在的地址，结果在最后确认的页面里面，它突然跳出来一句：我们不支持邮寄下列物品到您所填写的地址，请修正后再重新下单。</p>
<p>这时候我的表情和心情是这样的：</p>
<p><img src="http://www.fangeming.com/images/p228173244.jpg" alt="wtf"></p>
<p>后来与其它书友交流过了下，发现这是只能填写美国境内地址的问题。而且有的更惨，因为直接用了国内的信用卡然后不幸被砍单。</p>
<p>于是最后用了 Viabox 搞到一个美国转运地址，重新下单，成功将货物发到了 Viabox。只是在填写信用卡的时候，忽然非常地怀念用比特币一扫即支付的日子。</p>
<h2 id="Viabox">Viabox</h2><p><img src="http://mccarleyfitness.com/images/viabox_header_1.jpg" alt="viabox"></p>
<p>收货的日子是漫长的，而收两件货物的日子更加漫长。因为 Viabox 支持并箱，在此期间便顺便将 Amazon 里面的点卡全购物也邮寄到 Viabox 来了。在这里不得不感叹一下美帝的效率之慢，除了邮寄包裹花了近十天之外，合箱又足足花了一星期。或许是黑五期间，业务量真的很大吧。</p>
<p>而选择使用 Viabox 的原因，一方面是大部分国内代购网站都只支持邮寄到大陆，另一方面，Viabox 除了支持信用卡，Paypal 等常规支付方式之外，还支持用比特币付款！于是打开比太钱包，扫码付款，在这一刻，不禁感叹比特币的使用之艰辛。不过想想也是十分合理，毕竟比特币在这种场合里，才最有使用意义。</p>
<h2 id="总结">总结</h2><p>海淘是一个能充分体现比特币优势的实用场景，但距离大众实用阶段还是有着不小的距离。期望在新的一年里，比特币能够真正的实用起来。</p>
<p><img src="http://media.coindesk.com/2014/03/Extremely_Volatile_Bitcoin.jpg" alt="bitcoin"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://s3.amazonaws.com/main-newsbtc-images/2015/04/ACCEPTING-BITCOIN-101.png" alt="bitcoin-accept"></p>
<p>在自己的眼中，2015 年的比特币的表现显得平淡了许多。的确，经历过了币价从 8000 跳到 900 的日子后，后边的这种小波动基本都看不入眼里了。而随着币价低迷，整个圈子都处于行业寒冬，尽管最近稍有了些春天的气息。<br>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Some Memories On Reading]]></title>
    <link href="http://imcoddy.github.io/2015/12/26/some-memories-on-reading/"/>
    <id>http://imcoddy.github.io/2015/12/26/some-memories-on-reading/</id>
    <published>2015-12-26T01:19:00.000Z</published>
    <updated>2015-12-26T02:13:50.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/nook_zpsn5gygcgb.png" alt="nook-and-macbook"><br>岁末年始，总是会想着回顾一下自己这一年里的所做所为。翻了一下这一年的笔记，有得，亦有失。如果真要感叹留下的最大遗憾是什么，或许是这一年里读的书实在太少了吧。<br><a id="more"></a></p>
<p>遥想早年在帝都求学打工时，曾经给自己定过一个读书计划：每个月内至少阅读一本新书。当时虽然还是学生囊中羞涩，正好遇到当当卓越两家电商方兴未艾的好时候，稍用点心，总是能淘到几本不错的好书，一饱眼福。</p>
<p>喜欢看书，却不喜欢藏书。或许这也是自己多年漂泊在外养成的后遗症，不愿搬家时面对着尘封之久的一整箱书而头痛。当然这也不是什么问题，玫瑰不方便随意相赠，好书却通常不分男女，老少咸宜。自己在看完一两遍后，逢年过节、朋友生日之时便随手送之，倒也免去了不少藏书的烦恼。</p>
<p>不过这个习惯，来到岛国后就基本上荒废了。一方面，毕竟是身在他乡，无法再像以前那样方便地购买中文书籍；另一方面，也是因为身在他乡，发现这边的书价通常折合人民币两三百，顿时深刻体会到书是多么滴又贵又重:P</p>
<p>当然，最多的原因是，我已经慢慢将阅读的习惯从实体书迁移到电子版了。</p>
<p>上个月在朋友圈里做了一个小调查，问了一下大家喜欢实体书还是电子书，以及最喜欢的阅读设备是什么。毫无意外，大部分人依旧偏向于实体书。而喜欢电子书的人，基本都购买了 Kindle。</p>
<p>虽然我一直不是 Kindle 设备的粉丝（最近刚买的 Kindle Fire 平板也仅仅是为了尝鲜），但真心佩服 Jeff Bezos 在这个信息爆炸的年代推出 Kindle 设备并运营得有声有色。没办法，受技术所限，电子墨水的设备在今天许多人看来依然是不可思议的：刷新慢、纯黑白、用途少，怎么还能有这么大的名气？而对于这样的人，通常是很难理解这“恰好”是它的优点：因为用途单一，你才能静下心来专心地阅读。而这样的体验，只有亲身感受到它的好处的人才能领悟。</p>
<p>书籍电子化是大势所趋，隐藏其后的是一场持续已久的数字信息革命。事实上，我一直以为我们现在身处在一场新的数字浪潮之中。如果说几年前我向别人推荐 Podcast 的时候还只是锋芒初显的话，这几年里知识共享的社区是愈发成熟了。除了 Quora 和 StackOverflow 这样的问答网站能够让人获得他们经验之外，Coursera 和 iTunes U 上的各大院校的 Open Course  项目则让人足不出户即可聆听名师讲坛，而 Udemy 和 Code School 这类偏实践的学习网站真正做到学以致用，人类历史上知识的获取从来都没有如何便利。</p>
<p>但知识终究不是感悟。学得越多，可以看淡不少，也会多增不少新的困惑。回望 2015，年初时与他人合译出书一本，年中开始陆续跟完 Open Course 三门，年末获得 Coursera 课程证书及奖学金一份。细算下来，其实原本应该可以做得更多。只是更多的时间精力在那个 24 小时不打烊的世界里面，每天都有着新鲜的事情发生，难免多少染上一些信息焦虑症吧。</p>
<p>是以，忽然有些怀念以前的读书生活。只愿在新的一年里，能多几个阳光午后，沏上一壶清茶，坐在窗台边上，静下心来，品读人生。</p>
<p>愿你也是。</p>
<p>PS：我不用 Kindle Device 读书。折腾好了 Nook 比 Kindle 好用一万倍。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/books-this-is-how-they-work-poster_zpsyb0hd9v4.jpg" alt="how-book-works"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/nook_zpsn5gygcgb.png" alt="nook-and-macbook"><br>岁末年始，总是会想着回顾一下自己这一年里的所做所为。翻了一下这一年的笔记，有得，亦有失。如果真要感叹留下的最大遗憾是什么，或许是这一年里读的书实在太少了吧。<br>]]>
    
    </summary>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Diary" scheme="http://imcoddy.github.io/categories/diary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My Ant Miner Story]]></title>
    <link href="http://imcoddy.github.io/2015/12/23/my-ant-miner-story/"/>
    <id>http://imcoddy.github.io/2015/12/23/my-ant-miner-story/</id>
    <published>2015-12-23T08:27:00.000Z</published>
    <updated>2015-12-29T11:41:18.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/hashnest-happy-new-yeah_zpssg8tvg31.png" alt="ant-happy-new-year"></p>
<h2 id="序章">序章</h2><p>巴比特有一个叫「沙之书」的开放翻译计划，其介绍是这样的：本项目取名“沙之书”，意在组织流动的信息，开放式的积累知识之细沙，经自组织汇成巍然沙丘，无穷无尽、不间断地汇编成比特币《沙之书》……<br><a id="more"></a><br>在很长一段时间里面，每当说起蚂蚁矿机的时候，我都会想起上面这一段话。虽然两者可谓是风牛马不相及，不过仔细琢磨一番，二者又似乎有着千丝万缕的关联。一方面《沙之书》算是我接触比特币的入门指导，而 Ant miner 则给了我尝试挖矿的机会。沙粒和蚂蚁，都是如此渺小而平凡，但当它们凝聚在一起时，却能发挥出巨大的能量。</p>
<h2 id="偶遇">偶遇</h2><p>对于一个 2013 年末尾才接触到比特币的人来说，用个人计算机来挖矿已经是一件遥不可及的事情了。飞涨的币价使得一大堆人涌进矿机行业，让这个原本就竞争激烈的市场变得更加狂热。但在 2014 年的长年阴跌里，挖矿行业的生态也有了巨大的变化。除了各大矿主积极寻找便宜电之外，云挖矿的宣传也在这时候流行起来。而我最开始与蚂蚁矿机的邂逅，则是收到 Hashnest 赠送的 1000G S4 算力。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/hashnest-s4-gift_zpsnxkzirfb.png" alt="hashnest-s4-gift"></p>
<p>说实话，在比特币的世界里面，云挖矿是有着受人诟病的原罪的：如果能保证收益，服务商自己直接挖不就好了？如果不能保证收益，用户又为何将比特币投入进去？</p>
<p>所幸对于我而言，没必要经历这样的思想：反正是礼物，收下就好。就这样过了一阵子，结果发现真的能挖到币，便在空闲之时又给为数不多的算力加上几 G。不过，我一直没有向里面充币，因为存钱罐的影响让人一直觉得心有余悸。</p>
<h2 id="合约">合约</h2><p>随着 Hashnest 的不断成熟，在 2015 年 3 月时，Hashnest 推出了新的加速回本云算力合约，其介绍如下：</p>
<blockquote>
<p>加速回本云算力合约（PACMiC）是HASHNEST推出的全新云算力产品。加速回本云算力（PACMiC）不需支付维护费，而维护费都由BITMAIN 承担。在买家回本之前，未偿还的本金还会收到利润。本金在回本完毕之后，矿机重新归BITMAIN所有，合同结束。因为加速回本云算力（PACMiC）是 不需要支付维护费的，因此回本周期将大大加速。与此同时，还能收获较高的利润。</p>
</blockquote>
<p>当时正值新矿机 S5 如火如荼，推出这样的合约，也充分体现了蚂蚁矿机对自己产品的信心。虽然之前我一起都只是用所得的算力进行操作，但经过这两个多月的使用，对 Hashnest 跑路的担忧少了不少。于是这次充了 1BTC 进去，在一个月后，觉得收益还算不错，又再加投了一个币。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/hashnest-contract_zpshgxibcxm.png" alt="hashnest-contract"></p>
<p>当然，收益率最高的还当属 V3 合约。在推出没多久就被一扫而空。现在想想，后悔当时没多买一点。</p>
<h2 id="布局">布局</h2><p>如果说生产矿机是比特大陆的立足点的话，推出 Hashnest 云挖矿以及合约则可以算是比特币金融业的拓展。</p>
<p>事实上，Hashnest 是我使用过的比特币相关网站中数据最透明的。除了页面上清楚明了地显示当前的营收情况之外，每一笔挖矿或交易记录都有迹可寻之外，用户甚至可以非常方便地以 csv 格式下载所有的历史数据，以便轻松地导入到 Excel 进行计算。同时，为了方便随时查看收益，用户还可以下载 Hashnest 应用到手机上。</p>
<p>而比特大陆远远没有止步于此。</p>
<p>除了在阿拉伯国家博览会上向中东土豪积极推广新矿机 S7 之外，九月的比特大陆也是重磅消息不断：在 <a href="http://www.8btc.com/bitmain-btc-wallet" target="_blank" rel="external">正式推出比特币钱包产品</a>没几天，就宣布 <a href="http://www.8btc.com/chain-btc" target="_blank" rel="external">上线新产品BTC区块浏览器，并启用百万美元级域名btc.com</a>。从生产到应用，逐渐形成一个闭环。这自然也是出于对比特币前景的看好，从寒总的话对前阵子的大阴线的评价便可以感受 :P</p>
<blockquote>
<p>看上去是哪位空头控盘大哥想要背水一战啊。彷佛就跟项羽的垓下之战一样，“今日固决死，愿为诸君快战，必三胜之，为诸君溃围，斩将，刈旗，令诸君知天亡我，非战之罪也。”等这位大哥倒下，币价不知已经多高了。</p>
</blockquote>
<h2 id="感触">感触</h2><p>挖矿可以算是比特币的安全根基。而由于比特币的自身原理，也吸引了诸多爱好者将资金投入进来。想想当时 S7 未出、S5 涨价还能热卖的情况下，挖矿行业有多赚钱可见一斑(在这里再次赞同一下李老师的说法：比特币就是钱)。</p>
<p>而经历过 2014、2015 这在这两年里，这个行业几乎又完成了一次进化。除了硬件的更新换代之外，整个行业也开始向专业化、节能化发展。用超级君的话来说：挖矿是一件专业的事情，应该让专业的人来做。</p>
<p>这是事物发展的趋势，也带来了众人对比特币矿工中心化的担忧。毕竟作为一种分布式的加密货币，过于集中会有不少隐患。而在这时候，看到蚂蚁推出<a href="http://tech.sina.com.cn/zl/post/detail/i/2015-10-09/pid_8492829.htm" target="_blank" rel="external">蚂蚁路由器矿机 R1</a>，忽然有种眼前一亮的感觉。正如本文开头所说的那样，虽然只是一点一滴，却又好似涓涓细水，源远流长。</p>
<p>这或许就是我作为一个比特币后来者对挖矿的期望。虽然接触比特币已久，但并没有自己去尝试过真正地挖矿。只希望在今后的某一天，坐在屋子里面上网时，忽然又收到一条通知：Your R1 has just mined 168 satoshi.</p>
<p>也许这一天，很快就会到来吧:)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/hashnest-happy-new-yeah_zpssg8tvg31.png" alt="ant-happy-new-year"></p>
<h2 id="序章">序章</h2><p>巴比特有一个叫「沙之书」的开放翻译计划，其介绍是这样的：本项目取名“沙之书”，意在组织流动的信息，开放式的积累知识之细沙，经自组织汇成巍然沙丘，无穷无尽、不间断地汇编成比特币《沙之书》……<br>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Install f.lux On Unjailbreak iDevices]]></title>
    <link href="http://imcoddy.github.io/2015/11/12/install-flux-on-unjailbreak-idevices/"/>
    <id>http://imcoddy.github.io/2015/11/12/install-flux-on-unjailbreak-idevices/</id>
    <published>2015-11-12T04:24:00.000Z</published>
    <updated>2015-11-18T13:22:11.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/sleep-better-use-flux_zps4iyen9cp.jpg" alt="sleep-better-using-flux"></p>
<p>作为一个每天长时间面对各类电子屏幕的人，有一个软件是必须安装的：<a href="https://justgetflux.com/" target="_blank" rel="external">f.lux</a>。安装之后，它会自动调节屏幕的色调，使得在晚上看电子屏幕不再这么刺眼。</p>
<a id="more"></a>
<p>由于 iOS 的系统限制，很长一段时间里 f.lux 只能在越狱后才能通过 Cydia 安装。这对于那些不想越狱但经常晚上刷手机的夜猫子来说，实在是非常痛苦。好在最近作者公开了一个方法，让用户可以自行编译，然后将 f.lux 安装到自己的手机里。</p>
<h2 id="准备">准备</h2><p>要想安装 f.lux 到自己的 iPhone/iPad 上，首先需要做如下准备：</p>
<ol>
<li>Mac OSX 10.10 系统并安装好 XCode 7 （Windows 用户可以直接把篇文章关了）。</li>
<li>注册成苹果的开发者（只需要免费注册一下就可以了，并不需要付费）。</li>
<li>下载 f.lux 的<a href="https://github.com/jefferyleo/f.lux/archive/master.zip" target="_blank" rel="external">代码</a>。</li>
</ol>
<h2 id="操作">操作</h2><ol>
<li>用 XCode 打开 iflux.xcodeproj</li>
<li>XCode &gt; Preferences &gt; Accounts 里添加自己的 iCloud 或开发者账号</li>
<li>在 Targets &gt; iflux &gt; General &gt; Identity 里面改一下 Bundle Identifier 以避免相同</li>
<li>在同一页面中，将 Identity &gt; Team 设置成自己的帐户</li>
</ol>
<p>完成上面的步骤后，就可以将 f.lux 安装到自己的设备上了</p>
<ol>
<li>接上要安装的设备，将 Build Target 设置为真机</li>
<li>按 Cmd+R 开始安装</li>
<li>如果是第一次安装的话，需要在设备上的 Settings &gt; General &gt; Profile 里面信任该应用</li>
<li>Open f.lux, and enjoy.</li>
</ol>
<p>最后不得不说，早上将其设置为 Darkroom 模式真是爽，再也不觉得刺眼了~</p>
<p>原文：<a href="https://justgetflux.com/sideload/" target="_blank" rel="external">https://justgetflux.com/sideload/</a> （貌似作者被苹果投诉而下线了……）</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/sleep-better-use-flux_zps4iyen9cp.jpg" alt="sleep-better-using-flux"></p>
<p>作为一个每天长时间面对各类电子屏幕的人，有一个软件是必须安装的：<a href="https://justgetflux.com/">f.lux</a>。安装之后，它会自动调节屏幕的色调，使得在晚上看电子屏幕不再这么刺眼。</p>]]>
    
    </summary>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Hack" scheme="http://imcoddy.github.io/tags/hack/"/>
    
      <category term="Health" scheme="http://imcoddy.github.io/tags/health/"/>
    
      <category term="XCode" scheme="http://imcoddy.github.io/tags/xcode/"/>
    
      <category term="iOS" scheme="http://imcoddy.github.io/tags/ios/"/>
    
      <category term="Tech" scheme="http://imcoddy.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我有21个比特币，这是我的故事]]></title>
    <link href="http://imcoddy.github.io/2015/11/07/my-bitcoin-story/"/>
    <id>http://imcoddy.github.io/2015/11/07/my-bitcoin-story/</id>
    <published>2015-11-07T08:41:00.000Z</published>
    <updated>2015-11-14T00:27:26.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://ieet.org/archive/bitcoin-225080_640.png" alt="bitcoin"><br>币价上涨，人气回暖。前阵子看到 @ahr999 组织的征文活动，想来距离自己接触比特币已经有两年之久，也借此时机，回顾一下这两年来自己的感受。</p>
<a id="more"></a>
<h2 id="初见">初见</h2><p>2013 年，对许多比特币玩家来说是一个又恨又爱的一年。在这一年里，比特币的价格一度超过 1000 美元，疯狂的涨幅在媒体的推波助澜下，也吸引了许多场外观众的眼球。而我，亦是其中的一员。</p>
<p>尽管印象中在此之前就曾经听说过比特币，但现在回想起来，当时完全没有放在心 。如果说早期比特币的发展源自于自由主义者对政府垄断货币的抵制，那么每一次暴涨的币价，将是比特币走向大众的最好广告。</p>
<p>幸运的是，比特币并非徒有虚表的泡沫产物，当你对她了解得越多，就越容易被其精妙的设计所折服。</p>
<h2 id="倾情">倾情</h2><p>我不知道有多少人也像我一样，在阅读完比特币的创世论文《<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system" target="_blank" rel="external">比特币白皮书：一种点对点的电子现金系统</a>》后，就义无反顾地喜欢上她的。对于我而言，在静心读完这篇文章了解了比特币的设计后，第一感觉只有两个字：震撼。</p>
<p>这样的感受，或许很大程度上也是和自己的专业背景有关。作为一个软件工程师，看到这样的设计难免感叹此乃天人之作。而中本聪的神秘背景，又为这个去中心化的自治系统增添了传奇的色彩。</p>
<p>但不得不说，比特币在那个时候，离大众其实还很远很远。毕竟这个新事物，有着太多的东西需要去学习和理解。我当时把<a href="http://p2pbucks.com/" target="_blank" rel="external">比巴克</a>和<a href="http://www.8btc.com/" target="_blank" rel="external">巴比特</a>的所有技术文章全翻了一遍，也试着自己去折腾各种比特币钱包。</p>
<p>尽管在《<a href="http://wap.miit.gov.cn/n11293472/n11293832/n12843926/n13917012/15754627.html" target="_blank" rel="external">人民银行等五部委发布关于防范比特币风险的通知</a>》之后币价一下子暴跌，在我觉得对比特币有足够的了解时，比特币的价格已经重回到了 700 美元之上。在当时交易所并不多的情况下，要获取比特币其实并不是一件轻而易举的事情。</p>
<p>是以，特别感谢巴比特的《<a href="http://8btc.com/thread-507-1-1.html" target="_blank" rel="external">“沙之书”开放翻译计划</a>》，提供了一个特别的平台，让更多人更方便地去了解比特币的点点滴滴。第一次在巴比特发帖《<a href="http://8btc.com/thread-2603-1-1.html" target="_blank" rel="external">比特币的五上历程</a>》便被编辑采用，获得了人生中<a href="https://blockchain.info/tx/a5321f53de1c70198c9d8d2604248533ae24441953c6e1cf8acaabbcd2b1fdfb" target="_blank" rel="external">第一笔比特币稿费</a>。0.04BTC 在当时看起来着实是不小的一笔，更重要的是，双方都认可其所代表的价值，这不正是比特币这种不需要政府信用背书的货币系统的意义所在么？</p>
<p>后来，也陆陆续续在巴比特上发一些翻译文章，正如我在专栏作者简介里面写的：比特币初心者。 致力于比特币文化搬砖中。 目前的小小目标是在这攒够一枚比特币:) <a href="https://blockchain.info/address/1MzziGBa7tNNzMwVJMPEjAfM1wRcvSGZu5" target="_blank" rel="external">https://blockchain.info/address/1MzziGBa7tNNzMwVJMPEjAfM1wRcvSGZu5</a> 。</p>
<p>只可惜，到现在还没有达成，今后还需要努力:)</p>
<h2 id="东瀛">东瀛</h2><p>由于现在身在岛国，虽然一直从国内网站关注着比特币的情况，但是对于国内币圈的发展，一直是熟悉而又陌生的。相比之上，对岛国比特币的发展了解得更多一些。虽然当年我也在 MtGox 注册了账号，但因为汇款（入金）不畅，侥幸逃过 MtGox 倒闭一劫。但岛国，或许是许多比特币老玩家的心头之痛。</p>
<p>与当年国内交易所送 iMac 送轿车的高大上相比，比特币在日本其实要低调得多。即使 MtGox 在业内造成了如此大的影响，但就算当时有不少人直接过来游行示威，周围的大部分群众还是不明所然。关于比特币在岛国的发展情况，可以参看以前写的文章《<a href="http://www.8btc.com/bitcoin-in-tokyo" target="_blank" rel="external">比特币在东瀛</a>》。</p>
<p>而对于我这种在海外工作的人来说，海外换汇其实还是一个不小的需求。如果从银行向国内汇款的话，手续费一次就需要 5000~6000 日元（折合近 300 人民币）。只可惜受安倍的宽松政策影响日元汇率一直走低，加上日本的比特币交易所大部分时候的折合价格比国内贵，用比特币来实现向国内汇款的想法，我基本没有进行实践。</p>
<p>话说回来。尽管比特币的价格从 2013 的高峰一直下跌，算上日元汇率持续走低的情况，从 2014 年至今用日元换比特币基本达到了持平的程度。面对这样的比特币保值结果，真感觉有一些哭笑不得。</p>
<h2 id="炒币">炒币</h2><p>比特币天生就是一个良好的炒作对象：数量有限，概念时尚，波动巨大，随时交易。既然当初是被币价高涨所吸引进来的，或许大部分都难免经历这样一个炒币的阶段。最初在火币上开了帐户，为了操作方便，还写了一些辅助脚本，方便下单并计算盈利额度。虽然现在再看其实这都是然并卵的事，不过在后来币价阴跌的一年多里，与一直持有相比也算是挽回了一些成本。</p>
<p>但这的确不是一种良好的心态，有一阵子每天关注币价起伏，甚至到了食无味寝难安、影响生活质量的地步。比特币这种常年无休的东西，要时刻盯盘实在是太累人了。后来币价波动平缓后心态调整得好了一些，也慢慢也开始了每个月不定期购买一点，一直至今。</p>
<p>如果要问从这段炒币经历当中学到了什么，或许更多的是开始对理财有了更深刻的理解。把比特币当作一只优质的股票来看的话，期望每次高抛低吸都能成功的机率是非常低的，而在抛早之后看着币价上涨，又往往容易抄底抄在山顶上。幻想着一夜暴富的人太多，而这样的心态去做短线其实无异于给别人送钱。非常佩服 @弦理论 和 @英英 这样从大势着眼的做法，看好只需要买入持有就是了。而要把这当作投资而非投机，着实需要交不少学费。</p>
<h2 id="币圈">币圈</h2><p>有人的地方有就江湖，比特币这样与钱直接挂钩的圈子，用鱼龙混杂来形容其实十分贴切。交易所倒闭，存钱罐被黑，烤猫跑路，山寨圈钱……每一个坑，都造成了一批又一批人的伤心离去。而在比特币这种容易受消息影响的环境下，每一次利好与利空，又成为收割韭菜的工具。而比特币的高门槛的学习曲线，也阻挡了它真正走向大众。</p>
<p>因此，尽管 2014 年里风投涌进，但比特币的相关发展，在我看来还是没有取得太大的进步。不过资金的进入，也着实让比特币的研究开发有了更大的发展。HD Wallet，Multisig，OpenBazzar，Sidechain，Smart Contract，这些都可能极大增强比特币的应用场景。</p>
<p>当眼光不再局限于币价之后，其实你反而更容易找到对比特币的信心。记得比太钱包开发团队有次在 QQ 群里说道，每一个使用比特币、支持比特币的人，都是在为这个行业贡献着力量。尽管这个冬天很长很长，但依然有着许许多多相关从业者在努力筹划着，积极应对不远的春天。</p>
<p>向一直坚持至今并未离去的同行者致敬 :)</p>
<h2 id="轮回">轮回</h2><p>人有悲欢离合，月有阴晴圆缺。两年过去了，有人离开了这个圈子，也有人在不断进入这个圈子。</p>
<p>随着币价稍稍回暧，以及 MMM 的传销推动，最近的一个多星期可以明显地感觉得到，沉寂已久的 QQ 群也开始变得活跃起来，不时有新人加入，并焦急地询问今天是跌是涨。</p>
<p>我开始觉得淡然了，就像我一般都不向周围的人推荐比特币一样，因为我理解 @ahr999 所说的，对不了解比特币就直接进入的人而言，不让他们接触比特币就是对他们最好的保护。</p>
<p>如今，新的韭菜已经养成，他们能有多少人《<a href="http://www.cybtc.com/thread-8549-1-1.html" target="_blank" rel="external">跨过 Bitzone，成为比特忠</a>》呢？</p>
<p>I don’t know.</p>
<p>What I know is, I am already one in the million, and I wish to see you on this side :)</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/21-bitcoins_zpstjfnvgn5.png" alt="one-in-the-million"></p>
<p>把比特币当作一只优质的股票来看的话，从中</p>
<p><a href="http://8btc.com/thread-2603-1-1.html" target="_blank" rel="external">比特币的五年历程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://ieet.org/archive/bitcoin-225080_640.png" alt="bitcoin"><br>币价上涨，人气回暖。前阵子看到 @ahr999 组织的征文活动，想来距离自己接触比特币已经有两年之久，也借此时机，回顾一下这两年来自己的感受。</p>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Diary" scheme="http://imcoddy.github.io/categories/diary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[One Year Anniversary of Haobtc]]></title>
    <link href="http://imcoddy.github.io/2015/10/20/one-year-anniversary-of-haobtc/"/>
    <id>http://imcoddy.github.io/2015/10/20/one-year-anniversary-of-haobtc/</id>
    <published>2015-10-20T07:07:00.000Z</published>
    <updated>2015-11-14T00:28:33.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://bittrust.s3.amazonaws.com/1437116509.png" alt="haobtc"><br>本文参与好比特币一周年征文，备记于此。</p>
<p>与好比特币相识，需要从《<a href="http://www.8btc.com/bitcoin-gandalf" target="_blank" rel="external">比特币甘道夫</a>》一文说起。最开始接触比特币时便被这种数量限定的机制深深吸引，十万刀的口号更是让自己坚定了囤币的信念。对于死忠而言，这两年以来的币价低迷其实是件让人痛并快乐着的事情。一方面看着价格走低又忍不住有种买买买的冲动，另一方面，币屯多了虽然心中会觉得踏实，但屯而不用，终非生财之道。是以看到坑王星空的这个新项目恰合我意，便随之一跳，一直至今。如今转眼一年将过，不禁回想起不少风月往事，以此为记。</p>
<a id="more"></a>
<h1 id="盈利模式">盈利模式</h1><p>最初的好比特币，其商业模式大概是这样：做一个 offchain 的钱包，鼓励人们存币进去。大家所存入的币被用来购矿机部署挖矿，再用挖矿所得来支付利息，每天总利息固定。</p>
<p>得益于星空的声望，这样朴实无华的模式相比当时天花乱坠的交易所融资贷款借币做空，确实更能获取比特币死忠的接受。是以推出不过三四个月，发展得倒也挺不错。随着新增的近千台 S5 上线（当时下手买入这批矿机真是一个好交易，因为后面 S5 的价格不降反升了😂），所给的利息也是涨了又涨，从最初的 0.2 币 提升到了一整个币，最新利息高达13.8%！</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/bitcoin/haobtc-increase-rate_zpskrugyour.jpg" alt="haobtc-increased-rate"></p>
<p>这种神马「全方位」，「全球数字资产管理专家」，「固若金汤」之类的字眼，今天再回首估计是很难通过新广告法的。相比之下，下面的介绍就更清晰明了地说明了好比特币的盈利模式。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/bitcoin/haobtc-doubi_zpsupemqrpc.jpg" alt="haobtc-doubi"></p>
<p>如果说前期的宣传还是让不少人对其营业模式一知半解的话，在好比特币推出了月账户后，大家的理解就更清晰了</p>
<p><img src="http://ww4.sinaimg.cn/mw1024/005KlMQWjw1esxo6mob20j30p03gok2e.jpg" alt="haobtc-monthly-account"></p>
<p>但纵使如此，在经历了存钱罐倒闭和比特儿被盗等诸多币圈大坑之后，对于大部分的群众，将手中的比特币牢牢握住才是正确的选择。好比特币初期收到的质疑也确实不少，例如可爱的比特币三胖哥就曾经<a href="https://www.bikeji.com/t/1074" target="_blank" rel="external">质问不已</a>。（话说三胖也成敏感词了，三胖哥是否依旧安好？）</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/bitcoin/haobtc-inquiry_zpso7af8w6c.png" alt="haobtc-inquiry"></p>
<p>确实，在这个圈子里面，信任是一个非常奢侈的话题。纵使我愿意相信好比特币是基于《<a href="http://www.8btc.com/bitcoin-gandalf" target="_blank" rel="external">比特币甘道夫</a>》一文中那种自由主义的向往，但对于比特币这种用技术捍卫个人财产的产物，交给他人托管其实无异于拱手相让。而对于个人的信任，很多时候并不可靠，但又无法避免。（关于信任，可以阅读一下 @virushuo 的《<a href="http://www.leiphone.com/news/201509/Q6MWlts9zKEyX0HV.html" target="_blank" rel="external">XcodeGhost：墙、感染、信任和欺骗</a>》这篇文章。）</p>
<p>正如现在的 VC 更看重的是创始人而不是他所提出的 idea，要建立对好比特币的信心，只能是听其言，观其行。至少在这一点上面，星空的作为是很容易唤起程序员的共鸣的。在 1024 程序员节的今天，必须给星空点个赞。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/haobtc-promise_zps5szuhyst.png" alt="haotbtc-promise"></p>
<p>而对于好比特币的私钥管理，星空是<a href="https://www.bikeji.com/t/1450" target="_blank" rel="external">这样说的</a>：</p>
<blockquote>
<ol>
<li>好比特币onchain多重签名保险箱的第三把冷库备份私钥，是由唐池潘志彪个人管理，未来也会继续由潘志彪个人继续管理。</li>
<li>阿彪管理的私钥只是好比特币多重签名保险箱onchain钱包三把私钥中的一把，主要用来当用户丢失保险箱密码找回onchain的币，从而保障用户的币在chain上，同时就算丢失自己的密码还能够把币找回来。</li>
<li>好比特币银行即有利息的钱包的私钥完全由好比特币公司管理。</li>
</ol>
</blockquote>
<p>遗憾的是，在好比特币网站上的介绍里面，并没有看到这样的信息。而对于矿场公开和算力公示的情况，也隐藏较深介绍得不够详细。是以不时会有新人反复质疑，实在遗憾。这或许是好比特币最需要加强的地方了。</p>
<h1 id="营销推广">营销推广</h1><p>在这个酒香也怕巷子深的年代，一个好的产品，离不开好的宣传。在这一点上面，好比特币做得可算是可圈可点。除了在各大网站上注册了官方账号互动宣传之外，内容更新回复解惑也比较及时。</p>
<p>得益于团队相对年轻时尚（尼玛哥我也不算老啊！），在把握热点事件方面，好比特币也是独树一格。下面几张看不懂的童鞋，可以回顾一下当时发生的热点事件。</p>
<p><img src="http://ww3.sinaimg.cn/mw1024/005KlMQWjw1eudwpcfp2dj30l318gq7p.jpg" alt="haobtc-star"></p>
<p><img src="http://ww4.sinaimg.cn/mw1024/005KlMQWjw1eum61aiakpj30f00qota3.jpg" alt="haobtc-winter-olympics"></p>
<p><img src="http://ww2.sinaimg.cn/mw1024/005KlMQWgw1etjmoxbj9gj30p013u40c.jpg" alt="haobtc-rainbow-day"></p>
<p><img src="http://ww3.sinaimg.cn/mw1024/005KlMQWjw1esl47qft23j30h50qogno.jpg" alt="haobtc-bitui-unite"></p>
<p>这样的例子还有不少（最近 Back To The Future 就不提了，估计大陆不少人其事都不知道这个梗），对于提升企业的正面形象也确实有帮助。不过也正如同其它的热点一样，来得快，去得也快。如果不是我今天这样挖出来，不知道还有多人记得呢？</p>
<p>而在另外一方面，对于一些利圈利民的宣传活动，感觉似乎又有一些力道不足。例如今年六一儿童节时的宣传活动，<a href="https://www.bikeji.com/t/1877" target="_blank" rel="external">参加者仅仅 17 人</a>。</p>
<p><img src="http://ww1.sinaimg.cn/mw1024/005KlMQWjw1esonqa2ly1j30ri1raqdm.jpg" alt="haobtc-childrens-day"></p>
<p>再比如，最近与 Coursera.org 合作的《比特币与数字货币技术》课程学习活动，响应者也是寥寥无几。</p>
<p><img src="http://ww4.sinaimg.cn/mw1024/005KlMQWjw1evx9w2yxl6j30yi1pcq9r.jpg" alt="haobtc-coursera-study"></p>
<p>诚然，现在是币圈寒冬，虽然这几天币价回暖稍微活跃了一些，不过看来看去，基本还都是熟悉的 ID。造成这样的原因有很多，但比特币高门槛的学习曲线无疑让不少人望而却步。也是如此，才更有必要宣传普及比特币的相关知识理念，让更多人能从中受益。好比特币提供的这两个活动都很好，可惜的是应者寥寥，实在是遗憾。</p>
<p>因此，好比特币在宣传方面，其实还可以做得更好的。更重要的是，不应该仅仅把目标局限于这个已经青黄不接的韭菜圈子里，而是应该面向大众走出去。在这一方面，@超级君 在知乎、雪球、简书等地方的宣传就做得其实不错，@Eric83 在 BitcoinTalk 和 Coindesk 上的相关报道，也为西方世界了解好比特币打开了一扇明窗。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/228228-d6ef692a77fb9e88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="haobtc-user-guide"></p>
<p> <img src="http://ww3.sinaimg.cn/mw1024/005KlMQWjw1essy1uycimj30f00qoad3.jpg" alt="haobtc-in-english"></p>
<h1 id="团队氛围">团队氛围</h1><p><img src="http://ww1.sinaimg.cn/mw1024/005KlMQWgw1ert88a3rjpj316c0nwdqi.jpg" alt="haobtc-team"></p>
<p>一个创业团队，其氛围往往取决于创始人的性格和气质。在这一点上面，好比特币是一个个性鲜明的团队。比如说，半年前好比特币开拓矿厂的时候的招聘启事是这样的。</p>
<p><img src="http://ww2.sinaimg.cn/mw1024/005KlMQWjw1es8bgsq00oj30hs3hx7d8.jpg" alt="haobtc-miner-hiring"></p>
<p>这里说句题外话，当时看到这个招聘的时候我的评论是不够高大上，后面的这种纯天然无 PS 的图片其实很难让人动心。比如后来 <a href="https://www.bikeji.com/t/2180" target="_blank" rel="external">BitFury 的矿厂宣传是这样撞矿厂</a>的：</p>
<p><img src="http://bikeji-pic.b0.upaiyun.com/uploads/upyun_image_asset/68/968/e9d86e0da98.jpg" alt="bitfury-miner-field"></p>
<p><img src="http://bikeji-pic.b0.upaiyun.com/uploads/upyun_image_asset/69/969/df3447b47b7.jpg" alt="haobtc-miner-field"></p>
<p>同样的，好比特币最近的招聘启事一样是个性十足：</p>
<blockquote>
<p>我们希望你的<strong>三观和我们接近</strong>：</p>
<p>-崇尚自由，认可比特币的价值；</p>
<p>-相信科学，喜欢在业余时间黑中医；</p>
<p>-充满爱心，但不要在办公场所养喵喵汪汪；</p>
<p>-志存高远，相信技术改变世界。</p>
<p>我们还希望你<strong>聪明和勤奋</strong>。</p>
</blockquote>
<p>其实这都不难理解，对于比特币这样的旷世杰作，其追随者自然难免有种对理想主义的情结在心底里面。而好比特币这样的比特人团队，几乎是星空爬山涉水招募而来，三观高度一致也是不足为奇。这样的团队的好处是沟通障碍少，效率高，因为很多东西很容易便可达成共识。不过从另外一个角度说，这样的氛围也容易让他人产生一些距离感，至少我看到招聘启事时虽然心动不已，但因稍有顾虑而一直没有投递简历。</p>
<p>纵使只是场外围观，好比特币总是少不了各种趣事。</p>
<p>比如，年初时不知道是谁把好比特币的群发到同性交友的网站后，不实会有同志入群咨询是否有群活动然后被调戏。其实说起来对于好比特币这种单性别团体，确实很合适这个主题啊。</p>
<p><img src="https://pic1.zhimg.com/fe3d32b766b31f2bd1e1d38f2d41f958_r.jpg" alt="haobtc-gay"></p>
<p>再比如，即使只是吃一个月饼，在好比特币里面也可以有这样的遐想：</p>
<blockquote>
<p>网站上做一个动画，用六年来比特币的价格做成一条曲线，从左下到右上铺上，曲线上有一个刻有比特币的月饼，网站右上角是一轮圆月，每一个用户打开网页，就清晰看到月饼慢慢沿着价格曲线从2009年轮转到2015年此刻，然后用户点击一下“加油”的按钮，月饼就上升一点，形成未来上升的曲线，显示已有＊＊人为比特币加油，后台设置1000人加油，月饼就可以轮转到右上角的圆月上。完整实现多年来币友们的呐喊：To da moon！</p>
</blockquote>
<p>而另外一方面，虽然这个圈子很小，自我调侃的倒是比比皆是。我不知道微博上 @今天好比特币跑路了吗 是好比特币里哪个鬼才想出来的点子，不过在现阶段，这对好比特币的形象并无益处。（话说回来，好比特币选择今年愚人节的时候<a href="http://www.8btc.com/haobtc" target="_blank" rel="external">推出了反跑路神器</a>，实在又是一个自黑。）</p>
<p>我不是说自我调侃不好，实际上在这个圈子待久了，看到这样的消息自然能秒懂并会心一笑。但是对于一些稍外围的用户而言，他们或许得到的感受是根本看不出来这是嘲讽，看看《<a href="https://www.bikeji.com/t/2434" target="_blank" rel="external">中本聪已经浮出水面</a>》和《<a href="https://www.bikeji.com/t/2393" target="_blank" rel="external">张晓翠和她的mmm帝国</a>》这样的帖子在巴比特和币看上面有多少信以为真的用户，就知道这里面的差距有多大了。当然，至此，币科技这个比特神教总舵，也确实是名符其实了。</p>
<p>最后，正如超级君在<a href="http://www.zhihu.com/question/34473912/answer/58875703" target="_blank" rel="external">知乎上所说的</a>，至今一年有余，却如同过了多个春秋，大概是比特币的世界里，极速的变化，让人觉得似乎过了几年的事儿一样。得非常庆幸，在人生 30 岁之前找到自己真正喜欢的行业，与一群非常 nice 的人一起工作，这是追求，也是福分。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/bitcoin/haobtc-1st-anniversary_zpscd13lct0.jpg" alt="haobtc-1st-anniversary"></p>
<p>因此，对于这样有个性的团队，在这特别的日子里面，送上我衷心的祝福：</p>
<p><strong><em>haobtc，1024！</em></strong></p>
<p>PS: 对了，今天我的好比特币利息又到账啦～<br><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/bitcoin/haobtc-monthly-record_zpsxptfwsvc.jpg" alt="haobtc-monthly-record"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://bittrust.s3.amazonaws.com/1437116509.png" alt="haobtc"><br>本文参与好比特币一周年征文，备记于此。</p>
<p>与好比特币相识，需要从《<a href="http://www.8btc.com/bitcoin-gandalf">比特币甘道夫</a>》一文说起。最开始接触比特币时便被这种数量限定的机制深深吸引，十万刀的口号更是让自己坚定了囤币的信念。对于死忠而言，这两年以来的币价低迷其实是件让人痛并快乐着的事情。一方面看着价格走低又忍不住有种买买买的冲动，另一方面，币屯多了虽然心中会觉得踏实，但屯而不用，终非生财之道。是以看到坑王星空的这个新项目恰合我意，便随之一跳，一直至今。如今转眼一年将过，不禁回想起不少风月往事，以此为记。</p>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Haobtc" scheme="http://imcoddy.github.io/tags/haobtc/"/>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/categories/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Brainwallet.org Is Dead, Long Live Brainwallet IV]]></title>
    <link href="http://imcoddy.github.io/2015/10/13/brainwallet-org-is-dead-long-live-brainwallet-iv/"/>
    <id>http://imcoddy.github.io/2015/10/13/brainwallet-org-is-dead-long-live-brainwallet-iv/</id>
    <published>2015-10-13T12:36:00.000Z</published>
    <updated>2015-11-01T01:07:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brain-wallets_zpsfabntddg.png" alt="brainwallet"><br>币圈里过的时间总是很快，两周前写的关于脑钱包的帖子因为个人原因耽搁了一下，估计大家也都忘记得差不多了。尽管如此，还是将这篇文章发在这里，一方面提醒大家不要因为币价稍涨就忘记了买买提，另一方面，提币到自己的钱包里面也请注意不要忘记了经常检查一下，因为从某种意义上来说，所有的比特币钱包都是脑钱包。</p>
<a id="more"></a>
<p>如果还没有看过《Brainwallet.org 已死，脑钱包将永生!》这一系列帖子的同学，可以先回顾一下。<br><a href="http://www.8btc.com/long-live-brainwallet" target="_blank" rel="external">http://www.8btc.com/long-live-brainwallet</a><br><a href="http://www.8btc.com/long-live-brainwallet-ii" target="_blank" rel="external">http://www.8btc.com/long-live-brainwallet-ii</a><br><a href="http://www.8btc.com/long-live-brainwallet-iii" target="_blank" rel="external">http://www.8btc.com/long-live-brainwallet-iii</a></p>
<p>这里，我们将从上次的测试开始说起。</p>
<h2 id="测试结果">测试结果</h2><p>尽管在上一篇文章里笔者说的是有三个地址存有币，实际的结果是，共有四个地址是有币的。具体的交易信息在<a href="https://blockchain.info/tx/92da49d1363f339dfa7ad38a1460066eec0b1265dce85a493d410ed4830ddfdf" target="_blank" rel="external">这里</a>。</p>
<p>生成的语句见<a href="http://www.8btc.com/long-live-brainwallet-iii" target="_blank" rel="external">文末评论</a>。几个小改动的地方如下（或许破解者自己都没有注意到……）：</p>
<ol>
<li>部分引号中的内容本身已包含有一个空格。</li>
<li>部分地址生成时用的是压缩格式而非默认的非压缩格式。</li>
<li>青楼变红楼。</li>
</ol>
<p>本次测试从文章发布到最后全部被破解，所花的时间正好一天。虽然不知道具体猜出来的两位用户花了多少时间，不过从几次取走的时间来看，应该花了不止十几分钟。虽然笔者的确试图增加一些混淆，不过在严格遵守所说的规则情况下，如果通过程序来找出来的话，其实一秒钟都不需要。</p>
<p>之所以做这个试验，是因为在一年前笔者的确用中文短语直接生成过部分脑钱包并存币于内。后来发现，这点沾沾自喜小聪明其实在暴力破解前面完全就是然并卵，随后就将部分转至了用 Git commit ID 与个人信息组合生成的脑钱包里。这样做是否足够安全了呢？或许下面的概念能让你更好的去评估。</p>
<h2 id="信息熵">信息熵</h2><p>信息是个很抽象的概念。我们常常说信息很多，或者信息较少，但却很难说清楚信息到底有多少，比如一本五十万字的中文书到底有多少信息量。直到 1948 年，香农提出了“信息熵”(shāng) 的概念，才解决了对信息的量化度量问题。</p>
<p>在信息论中，熵是接收的每条消息中包含的信息的平均量。实际上，熵的大小与事件出现的概率息息相关。事件的概率分布和每个事件的信息量构成了一个随机变量，这个随机变量的均值（即期望）就是这个分布产生的信息量的平均值（即熵）。假设有一枚“理想”的硬币（抛出正面和反面的几率相等），每一次抛硬币都是独立的、不可预测的，其结果不是正面、就是反面（ 0 和 1 ），那么这个抛硬币事件的熵就是 1 个比特/位，抛 256 次的熵就是 256 个比特/位。而这，将会是一个完美的比特币私钥。</p>
<p>对于所生成的每一个比特币私钥，其生成方式的熵的大小是否足够大是衡量其是否安全的一个重要指标。但是，在计算机的世界里，<a href="http://www.zhihu.com/question/20423025" target="_blank" rel="external">所有的随机数产生器都是伪随机</a>，这就意味着黑客有可能通过刻意的方式，模拟并生成相同的私钥。在这一点上，<a href="https://www.bikeji.com/t/378" target="_blank" rel="external">Blockchain.info 就吃过大亏</a>。</p>
<p>在这一方面，国内的比太钱包团队曾经做过不少科普（具体见<a href="http://www.8btc.com/random23304" target="_blank" rel="external">文1</a>、<a href="http://www.8btc.com/random" target="_blank" rel="external">文2</a>、<a href="http://www.8btc.com/random-3" target="_blank" rel="external">文3</a>），其钱包在生成私钥时会要求用户打开摄像头和麦克风以从用户周围的环境获取信息以得到更高的随机性，以便生成的私钥的熵更大。</p>
<p>而脑钱包的熵能有多大呢？在这一点上，阐述得最明确的是  <a href="https://blog.ethereum.org/author/vitalik-buterin/" target="_blank" rel="external">Vitalik Buterin</a> 的博文《<a href="https://blog.ethereum.org/2014/10/23/information-theoretic-account-secure-brainwallets/" target="_blank" rel="external">An Information-Theoretic Account of Secure Brainwallets</a>》。巴比特曾将其翻译成<a href="http://www.8btc.com/secure-brainwallets" target="_blank" rel="external">中文</a>，但翻译有部分错误，推荐有能力的同学直接看原文。</p>
<p>文中最终结论是，从目前的情况来看，2^80 是可接受的最小安全水平。而要拥有 80 位熵，你需要约 17 个随机英文字母或 12 个随机字母、数字和符号的组合。单纯从字面上看，上一篇文章所提到的「加长输入的长度」、「使用扩展字符集」等建议，是可以轻松满足这个条件的。</p>
<p>但是，用户是否真的如此有把握，能够让能够让自己所构建的输入信息足够随机？很遗憾，这几乎是不可能的任务。受限于人类文化的限制，纵使有着浩如烟海的书海，大部分人脑海中所能想到的词汇其实只是其中很小的一个子集。在计算机硬件飞速提升以及机器学习能力日益增强的情况下，如果输入的短语长度不够，或者语义过于容易记忆，被暴力破解将是不可避免的事情。</p>
<p>因此，直接输入一串常用单词组成的短语来当作脑钱包，是非常不安全的。从这一点上来说，Brainwallet.org 死得并不冤枉。</p>
<h2 id="确定性">确定性</h2><p>如果说直接用常用的词组来组成的脑钱包难以逃脱黑客无特定目标的暴力破解的话，在生成脑钱包时通过「添加个人专属信息」、「对输入进行加密转换」等方式来处理的话，在一定的程度上可以生成十分”复杂“的脑钱包，因为这相当于给这个脑钱包增加了一些不确定性（Deterministic）。</p>
<p>但这种用户刻意增加的步骤，其实并没有改变所生成的脑钱包是已经确定了（Determined）的本质。此时黑客要想攻破这样的脑钱包，不仅需要构建相同的输入，同时还需要知晓用户对原始输入的操作步骤。虽然针对某个地址的个性化攻击通常成本很高，但在币价高涨而且确定某个地址里数量颇多的币确属于某个人的时候，通过一些社交工程进行定向分析并破解绝非匪夷所思。</p>
<p>举个例子，假如用户通过 <code>SHA256(&quot;a&quot;)</code> 去掉后三位得到的字符串 <code>ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee4</code> 看上去似乎十分复杂，要想直接通过暴力穷举这个字符串难度也的确难度很大。但如果攻击者通过监视日志和上网记录等方式，判断出用户在交易前都有用在线工具计算 SHA256 值的习惯后，尝试碰撞并成功的概率则不可忽视。</p>
<p>虽然用户确实可以通过对上面的结果再通过某种方式进行二次加工以降低被破解的可能性，但这并没有解决上述的问题，只不过是隐藏得更深一些而已。而在这种情况下，脑钱包的安全性将不仅取决于用户所使用的方法的复杂度，还将依赖于用户是否有足够的记忆力去清楚地记住生成的步骤。虽然自定义的步骤越多的确破解的可能性就越小，但笔者以长者的身份告诉你，这种繁琐的步骤，最终将往往成为你再次解锁该地址的阻碍。</p>
<p>这就是所有脑钱包的悲剧根源，既然它是确定性的，可以从你的脑海映射到具体的比特币地址上，也就意味着他人在知晓你的输入内容及生成方式的情况下，能够如法泡制生成相同的私钥。虽然用户可以努力防护好自己，但这份与生俱来的原罪，如同一把达摩克利斯之剑，无时不刻不悬挂在每一个存有币的脑钱包地址上。　　　</p>
<p>值得一提的是，虽然脑钱包工具无法避免上面的根本问题所带来的尴尬，但事实上可以通过另一种方式来缓解被暴力破解的情况。其做法是通过多次重复执行算法固定的运算，增加生成结果的复杂度的同时，也增加了生成脑钱包所需的时间。对于用户而言，生成一个脑钱包地址时需要花费 2ms 和花费 200ms 似乎没有太大的差别，但对于暴力破解的程序来说，速度就这样活生生地拖慢至原先的百分之一。有兴趣的同学可以自行到 Keybase.io 所提供的 <a href="https://keybase.io/warp" target="_blank" rel="external">Wrap</a> 钱包体验一下。（话说我似乎还有 <a href="https://keybase.io/" target="_blank" rel="external">Keybase.io</a> 的邀请，10mBTC/枚出售，有兴趣的同学快私信我吧哈哈哈。）</p>
<h2 id="万物皆是脑钱包">万物皆是脑钱包</h2><p>既然脑钱包的问题根源是因为其有着确定性的根源、可以被单向推导而出造成的，那么换用具有不确定性的生成算法，是否就能解决这问题了？</p>
<p>这个问题，回答是，但回答又不是。</p>
<p>诚然，从密码学安全的角度来说，通过引入了用户环境的随机变量，攻击者即使知道其使用的加密方法，但因无法重现用户生成私钥时的运行环境，因此无法将其攻破。但纵使比特币地址的数量如同浩瀚星海，当用户最终弱水三千只取一瓢确定下想要使用的比特币地址时，其私钥亦已尘埃落定，无法更改。因为最终，每一个比特币私钥都将确定无疑。</p>
<p>如果说通过在 Brainwallet.org 输入一串短语所得到的比特币私钥是传统意义上的脑钱包的话，广义上的脑钱包，指的是用户通过自己的记忆，采取各种方式获得对比特币私钥控制权的能力。而对于每一个将要被使用的比特币私钥，事实上都必须通过使用者的脑力转换，才可能将其解锁。</p>
<p>不相信是吗？那我们聊聊看：</p>
<blockquote>
<p>我用的是 Bitcoin Core 随机生成的钱包。</p>
</blockquote>
<p>你其实需要记住对 wallet.dat 加密的密码，而且还可能需要定期备份该文件，并记得它存在哪个文件夹里面。</p>
<blockquote>
<p>我用的是 Electrum 离线生成的钱包地址。</p>
</blockquote>
<p>它应该让你做备份了吧？那十几个随机单词的生成方式和我上一篇文章介绍的是相同的。而且你不仅需要记下这十几个单词，还需要记住是用什么软件生成的以便能重新导入。</p>
<blockquote>
<p>我用的是 Vanitygen 自己生成的私钥。</p>
</blockquote>
<p>然后这私钥你是记在脑海里面还是记在本子里面了？用没有用 BIP38 加密？加密的密码记下来了么？</p>
<blockquote>
<p>我用的是硬件钱包，它支持指纹识别，我完全不需要密码！</p>
</blockquote>
<p>你其实还是需要记住你用的是那个硬件钱包，它放在哪里，以及你是用哪一根指头去进行识别的……</p>
<p>因此，虽然每一个比特币私钥只是短短的几十个字符，其存储媒介和获取方式由于使用者的不同而存在着诸多差异。</p>
<p>人类对于物理媒介的管理要比数字化信息的管理要在行得多，很多时候只需要将私钥打印在纸张上，然后锁在保险箱里即可。这时候对私钥的管理其实降纬成了对纸钱包保存位置的记忆，而这样的物理隔离，使得私钥的一免受暴力穷举的攻击，毕竟黑客不太可能登门入室进行劫取。不过这在增加使用不便的同时，其实也加大了私钥备份维护的负担。否则在火灾洪水等意外灾难来临之时，存在里面的比特币也将一同化为乌有。</p>
<p>写到这里，想必各位读者也已经能明白，对于比特币的存储，没有一种方法是一劳永逸的。传统的脑钱包在方便了自己的同时，也给了黑客可乘之机；而通过软件生成的地址，无法在急需的时候能迅速使用，还可能因为天灾人祸而毁于一旦。</p>
<p>因此，更重要的是，需要根据不同的存储方式的特点，选择合适的方式来进行托管。</p>
<ul>
<li>对于日常使用的小额比特币，可以用手机软件随机生成地址存储，不过请不要忘记支付密码。</li>
<li>对于储值用的大额比特币，可以用软件在离线环境下生成地址存储，不过请不要忘记备份所保存的位置。</li>
<li>对于部分暂时不用但希望能在某天用来应急的比特币，可以用脑钱包生成存储，不过切记需要混淆输入的内容，加入个人信息，并使用类似 WrapWallet 这样的脑钱包工具进行多次运算以增加破解难度。</li>
<li>可能的话，使用多签名地址。我就是用脑钱包生成的私钥来构建多签名地址保存 ，可惜没有找到支持自行导入多签名 RedeemScript 的软件。</li>
</ul>
<p>写到这里，终于可以应一下本系列文章的题目了：Brainwallet.org 已死，脑钱包将永生。好好记住你是如何管理每一个比特币地址的吧！因为除了你，或许谁也无法再将其重现。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brain-wallets_zpsfabntddg.png" alt="brainwallet"><br>币圈里过的时间总是很快，两周前写的关于脑钱包的帖子因为个人原因耽搁了一下，估计大家也都忘记得差不多了。尽管如此，还是将这篇文章发在这里，一方面提醒大家不要因为币价稍涨就忘记了买买提，另一方面，提币到自己的钱包里面也请注意不要忘记了经常检查一下，因为从某种意义上来说，所有的比特币钱包都是脑钱包。</p>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Brainwallet" scheme="http://imcoddy.github.io/tags/brainwallet/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/categories/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Brainwallet.org Is Dead, Long Live Brainwallet III]]></title>
    <link href="http://imcoddy.github.io/2015/10/10/brainwallet-org-is-dead-long-live-brainwallet-iii/"/>
    <id>http://imcoddy.github.io/2015/10/10/brainwallet-org-is-dead-long-live-brainwallet-iii/</id>
    <published>2015-10-10T09:16:00.000Z</published>
    <updated>2015-10-12T03:03:31.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brain-wallets_zpsfabntddg.png" alt="brainwallet"></p>
<p>这其实是一份姗姗来迟的文章，阐述了笔者个人对脑钱包的一些看法。尽管原作者因安全原因将 brainwallet.org 关闭，但笔者认为脑钱包有其存在的意义和研究价值。在<a href="http://www.8btc.com/long-live-brainwallet-ii" target="_blank" rel="external">上一篇文章</a>里面从原理上分析脑钱包的安全性，本篇将分享部分“可行”的脑钱包生成方案。首先感谢读者对前两篇文章打赏支持，本文以飧读者，包含了几个小彩蛋，欢迎大家挖掘。　</p>
<a id="more"></a>
<h2 id="脑钱包使用军规">脑钱包使用军规</h2><p>前两篇说了这么多，是时候开始进入脑钱包的使用实战了。在出征前，有必要重温一下脑钱包的安全使用军规：　　　</p>
<blockquote>
<p>“安全的根本，是时刻记住，没有任何东西是绝对安全的。 ”</p>
<p><cite>@imcoddy</cite></p>
</blockquote>
<p>安全，永远是一个讨论起来就永无止境的话题。如果你认真看完前面的两篇文章，到现在应该已经清楚地明白上面这个观点了。</p>
<p>虽然绝对的安全无法获取，但对大部分人而言，相对的安全在很多时候已经足够。既然 Brainwallet.org 在原理上并没有太大的问题，如果想要通过它来使用好脑钱包，享受其所带来的便利的话，那么问题就变成了这个：如何构建一个独一无二的输入？</p>
<p>下面这些笔者的个人经验，或许能给你带来一些启发。</p>
<h2 id="“正确”的使用姿势">“正确”的使用姿势</h2><p>要想“正确”地使用好脑钱包，下面的一些个人经验，是很好的参考对象：</p>
<h3 id="1-_增加输入的长度">1. 增加输入的长度</h3><p>首先出一道小测试题。下面的两个短语，哪一个用来做脑钱包安全性会更高？</p>
<ol>
<li>D0g!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</li>
<li>PrXyc.N(n4k77#L!eVdAfp9</li>
</ol>
<p>这里面的小把戏如果用等宽字体显示就会很容易看出来。前者是英文单词“dog”的简单变形再加上 30 个感叹号，而后者则是一般人记不住的由 23 个字符组成的乱码。虽然对人类而言前者虽长但却容易记忆，对计算机而言，两者其实只是不同长度的字符串。而要通过穷举的方式构造一个相同的字符串的话，所需要花费的时候将根据长度的增加而指数增长。　</p>
<p>但在经过了这么多年的网站注册登陆教育后，许多人都已经习惯了将密码设置为不超过 16 位长度，甚至有的人还只使用不超过十位的纯数字当密码。这一点，是使用脑钱包的新手最容易犯的错误。如果说设置网站密码时不能超过 16 位还情有可原（其实这也是这个网站过于懒惰，一切明码存储用户密码的网站都是流氓。更合理的做法是对用户密码进行哈希计算然后保存 hash 值，而这样做之后所有的密码最终存储都是定长的，完全不需要限制用户的输入长度），但对于脑钱包这样可以输入无限字符的工具，仅仅输入十几个字母就拿来用无异于将里面的币拱手相让。　</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/password-strength_zpsm0hzv0e3.png" alt="password-strength">　</p>
<p>因此，与其瞑思苦想去构建一个长度限定的复杂密码，不如想一个别人难以想到的长句子。这里说句题外话，将上面的过程反过来，通过一个好记的长句子，其实可以生成一个好密码，这正是笔者前阵子编写的 <a href="http://passwork.herokuapp.com/" target="_blank" rel="external">PassworK</a> 的原理所在，这个工具的论坛讨论帖<a href="http://8btc.com/thread-21037-1-1.html" target="_blank" rel="external">在此</a>，欢迎有兴趣的同学围观。</p>
<h3 id="2-扩大输入的字符集">2.扩大输入的字符集</h3><p>可以说，现在针对脑钱包的攻击大都是基于 ASCII 码的，这一方面是因为脑钱包出现时外文资料贫乏，活跃的基本都是英文玩家；另一方面，与不超过 256 个字符的 ASCII 码字符集相比，针对非标准字符集生成的脑钱包的暴力攻击难度直接提升了若干倍。</p>
<p>这对于中文玩家，可谓是一个福音。虽然中文常用字数量与英文常用词汇相比偏低（大陆常用字为 2500 字，香港 4759 字，台湾 4808 字。<a href="https://zh.wikipedia.org/wiki/%E5%B8%B8%E7%94%A8%E5%AD%97" target="_blank" rel="external">信息来源</a>），但字字相组成词后，所能表达的意思远大于相同长度的其它语言。</p>
<p>如果对上面的这句话不太好理解的话，看完下面的例子或许你就能豁然开朗了：</p>
<blockquote>
<ol>
<li>The king is always lucky——王老吉；</li>
<li>The king is kept justice——王守义；</li>
<li>The king is lead to peace——王致和；</li>
<li>The king from the sky——王天来。</li>
</ol>
</blockquote>
<p>这意味着什么？这意味着在相同长度的输入里，中文可以拥有更多的信息量。纵使许多人对重复输入一模一样的几百字长文或许稍有难度，但完全无误地输入十几个相同的汉字通常都不会有问题。而用十个汉字组成的一个有意义的短句所生成的脑钱包，要破解的难度就可能比十个英文单词生成的更大。</p>
<p>十几个汉字很难构造吗？写到这里，笔者顿时觉得“文思似泉涌，下笔如尿崩。”想来年少时曾受中华文化目濡目染，神马唐诗宋词还不是信手拈来？且看本湿人呤来！</p>
<blockquote>
<p>“一朝被蛇咬，处处闻啼鸟。”</p>
<p>“两岸猿声啼不住，一枝红杏出墙来。”</p>
<p>“在天愿作比翼鸟，大难临头各自飞。 ”</p>
<p>“问君能有几多愁，恰似一群太监上青楼。”</p>
<p>“红酥手，黄滕酒，两个黄鹂鸣翠柳。长亭外，古道边，一行白鹭上青天。”</p>
<p>……</p>
</blockquote>
<p>当然，要是觉得才思枯竭一时想不出什么好句子，这也简单。随便找一段话复制粘贴出来不也是很简单的事情嘛。</p>
<p>例如巴比特站长长铗对<a href="http://www.8btc.com/long-live-brainwallet" target="_blank" rel="external">本文的评论</a>是这样的：</p>
<blockquote>
<p>“很有趣，脑钱包就像是火，对人猿来说，它是危险的玩物，但对智人来说，它是可驾驭的工具。”</p>
</blockquote>
<p>币科技活跃人士超级君的<a href="https://www.bikeji.com/t/2281#reply11" target="_blank" rel="external">评论</a>则是这样：</p>
<blockquote>
<p>“之前对脑钱包并不大感冒，这篇文章给出了脉络清晰的脑钱包历史，有论点有史料，作者还动手，延续脑钱包的产品，真是比特币极客党派。已赞。”</p>
</blockquote>
<p>只要上面的网站能访问，该评论未被删除，你就可以找到这两段原话，然后用来生成脑钱包。</p>
<p>等等，脑钱包不是不应该用网上可以找到的语句吗？如果你产生了这样的疑惑，那么恭喜你，你还没有忘记一开始所说的安全军规！虽然像中本聪这样大隐隐地市让吾等无尽感慨，试图将比特币隐藏于网络上的只言片语的做法往往得不偿失。虽然如此，笔者打算以此为契机尝试一下，作为给刚看到本文的读者的福利：</p>
<ol>
<li>通过上文每一对双引号中的内容所生成的脑钱包地址里，有三个并不是空的。</li>
<li>生成脑钱包的网址为：<a href="http://brainwallet.herokuapp.com/" target="_blank" rel="external">http://brainwallet.herokuapp.com/</a></li>
<li>注意，在生成脑钱包时所用的短语为双引号中全部内容并加上一个半角空格。因此，“一朝被蛇咬，处处闻啼鸟。”所生成的地址并不是 13DuS9tSRuXtS13P11pJSFRq25VuDG33kT。</li>
<li>其中的一个脑钱包中的颜色的汉字被换成了另外一种颜色的汉字。</li>
<li>若干小陷阱，且看君人品。</li>
</ol>
<p>成功找到的同学请自行取走，然后留言告之并宣布正确答案吧~</p>
<p>最后，关于此节里值得一提的是，采用扩大字符集会有潜在风险：你可能无法在一台离线的设备上输入非英文字符（例如有些人可能会用 Live USB 启动一个 Ubuntu 系统而里面并没有安装默认安装中文字库），或者不同的系统对 UTF-8 的支持不同造成在不同的机器上输入有差异，以至于生成的地址不一致。　　　　　　　　</p>
<h3 id="3-混淆输入内容">3.混淆输入内容</h3><p>如果你没有马上去找上面奖励而是继续往下看，那真是儒子可教。因为对于这种明码放出来的脑钱包，是使用脑钱包的大忌。脑钱包的破解其实是一个见招拆招的过程，虽然上面吟诵的几句都是混搭而非原作，他人的评论亦可认为是一个随机产生的结果，但像上面这样将规则公布于众之后，就相当于将里面的比特币拱手相让了，虽然笔者的确是在送比特币 :P</p>
<p>要想生成一个足够安全的脑钱包，对其输入的内容进行混淆是必不可少 。而混淆的方式，则可以有千万多种。</p>
<h4 id="添加个人专属信息">添加个人专属信息</h4><p>这包括但不限于你的名字，身高，住址，邮箱等个人信息。这一点的好处是对于自己而言输入并不是难事，但在输入里面增加这些个人信息后，那些无具体针对目标的脑钱包攻击将大部分失效。因为他们的词汇表里面没有你的个人信息，也就无法构建相同的输入。</p>
<p>例如我曾经用过的一个例子是之前所用的 iPhone 4S 手机的序列号，或许知道这信息的只有我电脑上的 iTunes，以及我的 Gmail 邮箱。</p>
<h4 id="对输入进行加密转换">对输入进行加密转换　　　</h4><p>在确定输入的内容后，对输入的内容进行加密转换。这个方式有许多种，你可以选择现有的加密算法，可以自己制定规则，甚至只是改变一下系统设置。</p>
<p>比如说，如果想以“A brainwallet has two sides”来生成脑钱包，下面举两个加密转换的例子。</p>
<p>1，对于每个长度大于 1 的单词，删除最后一个字母。即得到 <code>A brainwalle ha tw side</code>，用其生成的脑钱包为<code>12kXjcVD22FpQLmy9TYAr1fnUCMpeQMjXP</code></p>
<p>2、先切换到 Converter 页，在 Source Text 框输入 <code>A brainwallet has two sides</code>，设置从 Text 输入转换成 Poetry 输出，结果为 <code>waist easily grasp hunger grab taint slide walk gather slam church concrete world passion shimmer mostly heel house people dig form</code>。将其作为脑钱包输入，得到<code>1HQDUbP5YNZKvhJ4tCvq7t8FGbSb38snWG</code>。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/convert-from-text-to-poetry_zpsdikokjoy.png" alt="convert-text-to-poetry"></p>
<p>上面的两个方法，都是对原始输入多进行了一次加工转换。相比前一种手动删除字母容易出错，个人更喜欢后者。这也是笔者将 Brainwallet.org 重新上线的原因。但这并不意味着后者一定比前者安全，因为后者的算法是固定并公开的，而前者的做法更多是用户一时兴起的做法，但在某些场合里说不定会有无招胜有招的效果。</p>
<p>至此，如果读者能意识到自己在脑钱包输入框里输入的内容自己也记不住时，你对脑钱包的理解就得到了升华：你并不一定需要记住最后输入的内容，你需要清楚记住的是你所输入的内容的生成方式。</p>
<p>值得一提的是，这个使用 Converter 进行的转换并不会增加输入的信息熵。在上一篇文章里，@ahr999 就<a href="https://www.bikeji.com/t/2288#reply10" target="_blank" rel="external">指出了这一点</a>。事实的确如此，单纯的执行 Hash 函数并不会使信息熵增加，但对于他人而言，用户在选择 Hash 算法这个操作上会使信息熵增加，因为这要求攻击者知晓被攻击者所采用的生成方式的信息。</p>
<p>关于熵的概念及进一步讨论将在下一篇文章里面说明。如果你还没有猜出上面的彩蛋的话，不妨去试一试吧。大家对上面脑钱包的破解所花的时间，将成为下一篇文章的参考。</p>
<p>本文打赏链接：1873PE9v17hZcAHPmBVufTAWVEhkunLoV3</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brain-wallets_zpsfabntddg.png" alt="brainwallet"></p>
<p>这其实是一份姗姗来迟的文章，阐述了笔者个人对脑钱包的一些看法。尽管原作者因安全原因将 brainwallet.org 关闭，但笔者认为脑钱包有其存在的意义和研究价值。在<a href="http://www.8btc.com/long-live-brainwallet-ii">上一篇文章</a>里面从原理上分析脑钱包的安全性，本篇将分享部分“可行”的脑钱包生成方案。首先感谢读者对前两篇文章打赏支持，本文以飧读者，包含了几个小彩蛋，欢迎大家挖掘。　</p>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Brainwallet" scheme="http://imcoddy.github.io/tags/brainwallet/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/categories/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Brainwallet.org Is Dead, Long Live Brainwallet II]]></title>
    <link href="http://imcoddy.github.io/2015/10/09/brainwallet-org-is-dead-long-live-brainwallet-ii/"/>
    <id>http://imcoddy.github.io/2015/10/09/brainwallet-org-is-dead-long-live-brainwallet-ii/</id>
    <published>2015-10-09T12:16:00.000Z</published>
    <updated>2015-11-01T01:07:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brain-wallets_zpsfabntddg.png" alt="brainwallet"></p>
<p>这其实是一份姗姗来迟的文章，阐述了笔者个人对脑钱包的一些看法。尽管原作者因安全原因将 brainwallet.org 关闭，但笔者认为脑钱包有其存在的意义和研究价值。在<a href="http://www.8btc.com/long-live-brainwallet" target="_blank" rel="external">上一篇文章</a>里面介绍了脑钱包的相关知识以及 Brainwallet.org 从诞生到关闭的过程。在本篇里，将从原理上分析脑钱包的安全性。</p>
<a id="more"></a>
<h2 id="比特币私钥">比特币私钥</h2><p>要分析脑钱包的安全性，首先要从比特币私钥的生成原理开始说起。以下部分大量参考了《<a href="http://zhibimo.com/books/wang-miao/mastering-bitcoin" target="_blank" rel="external">Mastering Bitcoin</a>》一书的相关章节，想了解更详细的读者请自行查阅。</p>
<p>比特币的所有权是通过数字密钥、比特币地址和数字签名来确立的。数字密钥实际上并不是存储在网络中，而是由用户以某种方式生成并存储在某个地方。它完全独立于比特币协议，亦无需区块链数据或网络连接。</p>
<p>每个密钥对包括一个私钥和一个公钥。私钥（k）是一个数字，通常是随机选出的。有了私钥，我们就可以使用椭圆曲线乘法这个单向加密函数产生一个公钥（K）。有了公钥（K），我们就可以使用一个单向加密哈希函数生成比特币地址（A）。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/private-key-to-address_zpsljvm2zjd.png" alt="private-key-to-public-address"></p>
<p>大多数比特币钱包工具为了方便，会将私钥和公钥以密钥对的形式存储在一起。实际上，比特币公钥可以由私钥计算推导得出，所以只存储私钥也是可以的。这一点，正是脑钱包能确保相同输入会生成相同输出的基础。</p>
<p>而比特币私钥，实际上只是一个随机选出的数字而已。你甚至可以完全不用电子设备，单纯用硬币、铅笔和纸来随机生成你的私钥：拿一枚硬币，重复抛 256 次，每次用纸和笔记录正反面并转换为 0 和 1 ，然后这一串随机得到的 256 位二进制数字即可作为比特币钱包的私钥。有好事者就曾经将自己的操作经历拍成视频放到了 <a href="https://www.youtube.com/watch?v=ieHoQ4sGuEY" target="_blank" rel="external">Youtube</a> 上，并“好心”地向里面放了一些比特币让有心人去领取。</p>
<p>事实上，作为一个比特币爱好者，笔者强烈建议大家去亲自尝试一下手工生成比特币私钥这一过程。然后你会深刻地感受到，虽然 256 次抛硬币看起来并不是太艰难，但这过程实在是无聊至极:P</p>
<p>另外多说一句，即使真的拿一枚硬币抛上几百次，得到的结果也不一定能保证足够随机。因为受现实物质世界的影响，这枚硬币最后是正面还是反面的概率无法达到完全相等的五五平开。正如理想的直线的宽度为零一样，真正的随机数只存在于理论里。知乎上<a href="http://daily.zhihu.com/story/7167468" target="_blank" rel="external">这篇文章</a>和<a href="http://daily.zhihu.com/story/4447721" target="_blank" rel="external">这篇文章</a>对此有所说明。</p>
<h2 id="脑钱包的生成原理">脑钱包的生成原理</h2><p>在上面抛硬币的实验中，有一个常识或许是很多人难以意识到的：如果你没有将抛硬币所得到的私钥保存下来的话，你这一生都将无法再次遇到它。因为对于 2^n 这一个指数级增长的函数而言，要想从 2^256 这个集合中随机抽取两次并期望所得结果相同的概率接近为零。</p>
<p>这或许成了不少早期比特币玩家无限懊悔的根源，在那个默认使用找零地址时常需要备份密钥的年代，有多少币只因玩家一时疏忽就从此永远埋没。虽然笔者没有看到较详尽的丢币统计，毕竟地址上的币是丢失了还是暂时尘封在区块链上是完全无法区分，但个人认为，在币价低廉的初期，因用户的操作失误而无法重见天日的比特币或许比大多数人估计的都要多得多。因此，对于每个擦身而过转瞬即逝的私钥，笔者只想说一句：且生成且珍惜。</p>
<p>Brainwallet.org 在某种意义上缓解了这个尴尬的局面。相对于难以记忆的一长串 0 和 1，用户通过输入自行编写的一串字符串，即可与一个固定的密钥生成一一对应的映射。其采用的算法其实很简单，通过对用户的输入进行一次 SHA256 操作，然后将生成的 256 位 hash 值作为私钥，其具体的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc_hash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hash = Crypto.SHA256($(<span class="string">'#pass'</span>).val(), &#123; asBytes: <span class="literal">true</span> &#125;);</span><br><span class="line">    $(<span class="string">'#hash'</span>).val(Crypto.util.bytesToHex(hash));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>巴比特去年翻译的《<a href="http://www.8btc.com/graphical-address-generator" target="_blank" rel="external">比特币地址生成（图形化）</a>》一文其实介绍的就是 Brainwallet.org 的生成方式。实际上，各个比特币软件在生成地址时，除了第一步中选取随机数时采用的方式可能稍有不同之外，后面的步骤完全相同。　　　　　　</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/bitcoin-address-generation_zpscgfe3yma.png" alt="bitcoin-address-generation"></p>
<p>因此，单纯从实现上来说，Brainwallet.org 做得也是无可厚非。毕竟 SHA256 算法目前还是安全的，比特币在内部实现时也大量使用，其生成的 hash 值也的确分布得足够分散。那么，为什么脑钱包自上线以来一直受到这么多安全指责呢？答案已经是不言自明了，这里面最脆弱的不是别的，正是在“Type passphrase here…”里输入的短语，以及输入这个短语的人。</p>
<p>因此，<strong>从这个角度而言，单纯地指责脑钱包不安全是不负责任的</strong>，因为在一条不结实的安全长链里面，其牢固程度取决于最脆弱的一环。而与计算机准确无误地按照指示执行命令相比，因用户操作而出错的概率要远远大得多。拿电脑系统来举例，现代的操作系统在用户权限管理上其实已经非常完善，如果能将自己置于受限帐户下，日常使用基本很难感染病毒。但还是有许多人贪图方便直接使用管理员账户，从而不小心被植木马的事情屡见不鲜。</p>
<p>但从另一个角度来说，脑钱包的确非常不安全。由于 Brainwallet.org 的算法透明公开（毕竟算法不透明的话是不会有人用的），整个流程的安全性完全取决于用户自身的安全意识。在这一点上， Brainwallet.org 向用户暴露了一个过于开放的接口，这虽然方便了用户，也带来了严重的安全隐患。</p>
<p>如果说要通过获取 wallet.dat 来盗币需要先通过种植木马及破解密码（如果钱包加密过的话）这两道关卡，将比特币存在脑钱包里就像将现金放在街头的公共储蓄箱里面，而且你无法阻止别人不时过来将其打开看看里面是否有币。更关键的一点是，这些不时过来打开箱子查看的人并不是针对某个个体，而是通过分析统计找出那些最可能被使用的箱子，然后飞速地确认并将里面的币收入囊中。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/public-safe-locker_zpsknr2iolu.jpg" alt="public-safe-locker"></p>
<p>只有充分理解上面这个例子的人，才有资格使用脑钱包。因为他会明白，此时要做的是找到一个不容易被他人发现而只有自己知道的箱子，才能安心地把东西放进去。幸运的是，能明白这点的人通常都会放弃自行生成比特币地址而是通过软件代劳，因为那样才能获得更好的随机性。而如果你依然“执迷不悟”的坚持想要使用 Brainwallet.org 来生成的话，笔者觉得有必要在下一篇文章里给你传授一些人生经验。</p>
<p>打赏链接：1873PE9v17hZcAHPmBVufTAWVEhkunLoV3</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brain-wallets_zpsfabntddg.png" alt="brainwallet"></p>
<p>这其实是一份姗姗来迟的文章，阐述了笔者个人对脑钱包的一些看法。尽管原作者因安全原因将 brainwallet.org 关闭，但笔者认为脑钱包有其存在的意义和研究价值。在<a href="http://www.8btc.com/long-live-brainwallet">上一篇文章</a>里面介绍了脑钱包的相关知识以及 Brainwallet.org 从诞生到关闭的过程。在本篇里，将从原理上分析脑钱包的安全性。</p>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Brainwallet" scheme="http://imcoddy.github.io/tags/brainwallet/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/categories/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Brainwallet.org Is Dead, Long Live Brainwallet]]></title>
    <link href="http://imcoddy.github.io/2015/10/06/brainwallet-org-is-dead-long-live-brainwallet/"/>
    <id>http://imcoddy.github.io/2015/10/06/brainwallet-org-is-dead-long-live-brainwallet/</id>
    <published>2015-10-06T09:16:00.000Z</published>
    <updated>2015-11-01T01:07:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brain-wallets_zpsfabntddg.png" alt="brainwallet"></p>
<p>这其实是一份姗姗来迟的文章，阐述了笔者个人对脑钱包的一些看法。尽管原作者因安全原因将 Brainwallet.org 关闭，但笔者认为脑钱包有其存在的意义和研究价值，是以又搭建了一个<a href="http://brainwallet.herokuapp.com/" target="_blank" rel="external">镜像</a>放到网上。内容较长，将分成几部分发表，欢迎大家围观并讨论。</p>
<a id="more"></a>
<h2 id="脑钱包是什么">脑钱包是什么</h2><p>顾名思义，脑钱包即存在于脑海中的比特币钱包。它其实是一种比特币私钥的生成方式，通过对用户的输入进行计算生成相应的比特币地址。让你只需要记住一个密码，便可以用这个密码在脑钱包程序中恢复比特币地址和私钥。</p>
<p>基于这个思想，一个名叫 Brainwallet.org 的网站于 2012 年 4 月出现了 。这是一个基于网页的 JavaScript 比特币地址生成器，通过对用户输入的内容进行运算后生成对应的比特币私钥和地址。</p>
<p>它带来的好处是十分明显的：1，用户不需要去安装 Bitcoin Core （当时还叫 Bitcoin ）软件，不需要下载庞大的区块链数据，只需要打开一个网址便可方便地生成比特币地址并接收；2，用户不要去学习如何定期备份 wallet.dat 文件，只需要记住自己所设置的密码，就能在需要的时候通过计算得到相应私钥。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brainwallet-org-first-public-release_zpsnahqghbf.png" alt="brainwallet-org-first-public-release"></p>
<p>脑钱包的出现在当时比特币应用贫瘠、对用户电脑水平要求较高的情况下，犹如一阵清新的拂面春风，给比特币社区带来不少活力。Electrum 的作者 Vitalik Buterin，就曾经在 Bitcoin Magazine 上写过一篇脑钱包的指南《<a href="https://bitcoinmagazine.com/articles/brain-wallets-the-what-and-the-how-1333845334" target="_blank" rel="external">Brain Wallets: The What and the How</a>》。在随后的几年里，Brainwallet.org 亦是更新不断，但这个核心的功能，直至 2015 年 8 月关闭为止，都几乎没有太大的变化。</p>
<h2 id="Brainwallet-org_之殇">Brainwallet.org 之殇</h2><p>尽管 Brainwallet.org 给大家带来了不少便利，不过由于其实现的机制，时常被业内人士所诟病。例如 Gavin 就曾经在个人的 <a href="https://gist.github.com/gavinandresen/3840286" target="_blank" rel="external">Github Gist</a> 上就写过一篇针对脑钱包的檄文《<a href="http://imcoddy.github.io/2014/01/18/do-not-use-a-brainwallet/" target="_blank" rel="external">Do Not Use A Brainwallet! You Are Likely To Lose Your Coins!</a>》，甚至做过这样的<a href="https://bitcointalk.org/index.php?topic=102349.10;" target="_blank" rel="external">表态</a>：</p>
<blockquote>
<p>Every time I look at the academic literature on passwords/passphrases, I get more depressed about the feasibility of either giving users a secure passphrase that they will remember or getting a secure passphrase from them. I fear there will be a lot of lost coins if “brain wallets” get popular.　　　</p>
</blockquote>
<p>这样的担忧绝非杞人忧天。实际上，这是由比特币的原理决定的。作为一款基于 P2P 网络的虚拟货币，比特币的存储实际上贯穿于整个网络，而非具体的实物媒介。尽管用户可以在离线的环境下保证使用脑钱包生成的私钥不会被木马盗取，但对于黑客而言，其可以采用暴力穷举的方式不断进行尝试，从而在发现存有币的地址时将其盗取。</p>
<p>实际上，每一个（存有币）的比特币地址都有可能被碰撞出来，因为每一个私钥不过是一串特别的字符串。而脑钱包的出现，虽然给了人们通过单词语句来生成比特币地址的便利，同时也让比特币地址被猜出来的概率大大增加了。</p>
<p>这催生部分以此为乐的掘金猎人，例如部分黑客就在 《<a href="http://www.morxploit.com/morxpapers/smashingbitcoins.pdf" target="_blank" rel="external">Smashing Bitcoin BrainWallets, for fun and profit! </a> 》一文里给出了详尽的代码，用户只需要设置好自己词汇表并运行便可。这样的攻击在 Brainwallet.org 出现初期非常有效，因为有不少用户仅使用很简单的诸如“password1”这样的短语生成的地址，而要暴力破解这样的脑钱包不需超过十秒。</p>
<p>这其中最让人著名的莫过于用”bitcoin is awesome”生成的脑钱包地址 <a href="https://blockchain.info/address/14NWDXkQwcGN1Pd9fboL8npVynD5SfyJAE" target="_blank" rel="external">14NWDXkQwcGN1Pd9fboL8npVynD5SfyJAE</a> ，因为有人在 2012 年用这个短语生成该地址后，向里面转入 500 枚比特币后，随后在不到一分钟的时间内，这上面的币就被全部转走。另一个著名的脑钱包地址为“correct horse battery staple”生成的地址 <a href="https://blockchain.info/address/1JwSSubhmg6iPtRjtyqhUYYH7bZg3Lfy1T" target="_blank" rel="external">1JwSSubhmg6iPtRjtyqhUYYH7bZg3Lfy1T</a>，由于这是 Brainwallet.org 初期的默认地址，陆陆续续不断有用户直接拿来使用向里面发币，到网站关闭为止居然积累了 15.4 个币，实在算是现代版的守株待兔。</p>
<p>这就是脑钱包的特点：如果你能确保生成一个独一无二的输入，你就基本上可以认为它是安全的。但一旦他人能构建出相同的输入，对方也将获得该地址的掌控权。而对于大量使用 Brainwallet.org 来存储比特币的用户而言，他们当中的大部分远远没有驾驭好这个工具所需的能力。</p>
<p>尽管社区里抵制脑钱包的呼声一直不断，最终导致 Brainwallet.org 关闭的，是数字反欺诈公司 White Ops 的安全研究员 Ryan Castellucci 于 2015 年 8 月 7 日在 DEF CON 23 大会公布的一项<a href="https://rya.nc/cracking_cryptocurrency_brainwallets.pdf" target="_blank" rel="external">研究</a>。</p>
<p>在该研究中，Ryan 编写了一个叫 Brainflayer 的程序，它能够每秒猜测 130,000 个密码，相比其早期版本性能足足提升了十余倍。如果该软件在强大的计算机上进行运算，花费 1 美元的成本就可以核对 5.6 亿个短语密码(<a href="https://bitcointalk.org/index.php?topic=1147035.0" target="_blank" rel="external">相关资料</a>）。Ryan 称，他用这个程序找到了超过 730 个比特币，其中有一个脑钱包是由“<a href="https://blockchain.info/address/1GjjGLYR7UhtM1n6z7QDpQskBicgmsHW9k" target="_blank" rel="external">how much wood could a woodchuck chuck if a woodchuck could chuck wood</a>”生成的，里面包含了 250 个比特币。</p>
<p>这使得以往被认为是足够安全的脑钱包短语被证明事实上十分脆弱。在这项研究被公布之后，Brainwallet.org 立即在 Twitter 上 <a href="https://twitter.com/brainwallet/status/629759260004630528" target="_blank" rel="external">宣布将永久关闭</a>，并清空了其在 Github 的源代码。</p>
<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brainwallet-org-closed-down_zpsdgq6ee9m.png" alt="brainwallet-org-shut-down"></p>
<p>事已至令，Brainwallet.org 就算是从此落下了帷幕。但这是否就算是给脑钱包下了死刑呢？脑钱包的安全性是否如此不济？这一切，还需要从脑钱包的详细原理说起。在下一篇文章里，笔者将对此进行阐述，并分析讨论脑钱包的安全性。</p>
<p>打赏地址：1873PE9v17hZcAHPmBVufTAWVEhkunLoV3</p>
<p>本文同步</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/brain-wallets_zpsfabntddg.png" alt="brainwallet"></p>
<p>这其实是一份姗姗来迟的文章，阐述了笔者个人对脑钱包的一些看法。尽管原作者因安全原因将 Brainwallet.org 关闭，但笔者认为脑钱包有其存在的意义和研究价值，是以又搭建了一个<a href="http://brainwallet.herokuapp.com/">镜像</a>放到网上。内容较长，将分成几部分发表，欢迎大家围观并讨论。</p>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Brainwallet" scheme="http://imcoddy.github.io/tags/brainwallet/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/categories/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Host Static Html On Heroku]]></title>
    <link href="http://imcoddy.github.io/2015/10/05/host-static-html-on-heroku/"/>
    <id>http://imcoddy.github.io/2015/10/05/host-static-html-on-heroku/</id>
    <published>2015-10-05T13:34:00.000Z</published>
    <updated>2015-11-01T01:07:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://photos.prnewswire.com/prn/20110712/SF33967LOGO" alt="heroku"><br>前阵子脑钱包的作者因为安全性的原因，将脑钱包网站彻底关闭，而且还将代码也清空了。确实，从安全性的角度而言，脑钱包的确容易出现被人撞库而造成损失，以至于 <a href="http://imcoddy.github.io/2014/01/18/do-not-use-a-brainwallet/" target="_blank" rel="external">Gavin 都强烈警告过不要用它</a>。但平心而论，脑钱包其实还是一个非常不错的在线工具，这样关闭未免有些矫枉过正了。因此，我打算在 Heroku 上重新开一个镜像。<br><a id="more"></a></p>
<p>由于之前 fork 过代码，将最近一些小修改合并到了 master 分支后，设置了一下 heroku 的配置，轻车熟路地就将代码部署上去了。不过当我打开了 <a href="http://brainwallet.herokuapp.com/" target="_blank" rel="external">http://brainwallet.herokuapp.com/</a> 之后，却提示应用没有正常配置。搜索一番后发现，原来结果居然是 Heroku 不支持直接部署静态的 HTML 网页！</p>
<p>发现这个原因后觉得有点哭笑不得。不过在知道原因后，解决起来也就容易多了：只需要让 Heroku 能正常识别出文件类型就好。这一般是通过设置 Procfile 来实现，不过人懒如偶，当然不会为了折腾一个静态页面去配置各种 Ruby 插件。当我知道 Heroku 对 PHP 支持不错时，新建一个叫 index.php 的文件，在里面加入以下一行代码即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span> <span class="keyword">include_once</span>(<span class="string">"home.html"</span>); <span class="preprocessor">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这样做之后，Heroku 就会将程序识别为 PHP 的应用，虽然会提示缺少某些文件，不过对于这样一个静态的网站，这并不是什么问题。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt; gps heroku master</span><br><span class="line">Counting <span class="string">objects:</span> <span class="number">1954</span>, done.</span><br><span class="line">Delta compression using up to <span class="number">4</span> threads.</span><br><span class="line">Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">764</span>/<span class="number">764</span>), done.</span><br><span class="line">Writing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">1954</span><span class="regexp">/1954), 600.38 KiB | 0 bytes/</span>s, done.</span><br><span class="line">Total <span class="number">1954</span> (delta <span class="number">1335</span>), reused <span class="number">1741</span> (delta <span class="number">1182</span>)</span><br><span class="line"><span class="string">remote:</span> Compressing source files... done.</span><br><span class="line"><span class="string">remote:</span> Building <span class="string">source:</span></span><br><span class="line"><span class="string">remote:</span></span><br><span class="line"><span class="string">remote:</span> -----&gt; PHP app detected</span><br><span class="line"><span class="string">remote:</span></span><br><span class="line"><span class="string">remote:</span>  !     <span class="string">WARNING:</span> No <span class="string">'composer.json'</span> found.</span><br><span class="line"><span class="string">remote:</span>        Using <span class="string">'index.php'</span> to declare PHP applications is considered legacy</span><br><span class="line"><span class="string">remote:</span>        functionality and may lead to unexpected behavior.</span><br><span class="line"><span class="string">remote:</span></span><br><span class="line"><span class="string">remote:</span> -----&gt; No runtime required <span class="keyword">in</span> <span class="string">'composer.json'</span>, defaulting to PHP <span class="number">5.6</span>.14.</span><br><span class="line"><span class="string">remote:</span> -----&gt; Installing system packages...</span><br><span class="line"><span class="string">remote:</span>        - PHP <span class="number">5.6</span>.14</span><br><span class="line"><span class="string">remote:</span>        - Apache <span class="number">2.4</span>.10</span><br><span class="line"><span class="string">remote:</span>        - Nginx <span class="number">1.6</span>.0</span><br><span class="line"><span class="string">remote:</span> -----&gt; Installing PHP extensions...</span><br><span class="line"><span class="string">remote:</span>        - zend-opcache (automatic; bundled)</span><br><span class="line"><span class="string">remote:</span> -----&gt; Installing dependencies...</span><br><span class="line"><span class="string">remote:</span>        Composer version <span class="number">1.0</span>.0-alpha10 <span class="number">2015</span>-<span class="number">04</span>-<span class="number">14</span> <span class="number">21</span>:<span class="number">18</span>:<span class="number">51</span></span><br><span class="line"><span class="string">remote:</span> -----&gt; Preparing runtime environment...</span><br><span class="line"><span class="string">remote:</span>        <span class="string">NOTICE:</span> No Procfile, using <span class="string">'web: vendor/bin/heroku-php-apache2'</span>.</span><br><span class="line"><span class="string">remote:</span> -----&gt; Discovering process types</span><br><span class="line"><span class="string">remote:</span>        Procfile declares types -&gt; web</span><br><span class="line"><span class="string">remote:</span></span><br><span class="line"><span class="string">remote:</span> -----&gt; Compressing... done, <span class="number">72.7</span>MB</span><br><span class="line"><span class="string">remote:</span> -----&gt; Launching... done, v3</span><br><span class="line"><span class="string">remote:</span>        <span class="string">https:</span><span class="comment">//brainwallet.herokuapp.com/ deployed to Heroku</span></span><br><span class="line"><span class="string">remote:</span></span><br><span class="line"><span class="string">remote:</span> Verifying deploy... done.</span><br></pre></td></tr></table></figure>
<p>就这样，脑钱包网站就重新恢复啦。撒花~ <a href="http://brainwallet.herokuapp.com/" target="_blank" rel="external">http://brainwallet.herokuapp.com/</a></p>
<p>当然，就算恢复了，并不意味着我推荐大家去将币存在脑钱包里面，除非你真的明白其原理，并加密过自己输入的密语。脑钱包对我而言是一个很方便的管理私钥的方式，但对于更多的人而言，用<a href="https://bither.net/" target="_blank" rel="external">比太钱包</a>才是更合适的选择。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://photos.prnewswire.com/prn/20110712/SF33967LOGO" alt="heroku"><br>前阵子脑钱包的作者因为安全性的原因，将脑钱包网站彻底关闭，而且还将代码也清空了。确实，从安全性的角度而言，脑钱包的确容易出现被人撞库而造成损失，以至于 <a href="http://imcoddy.github.io/2014/01/18/do-not-use-a-brainwallet/">Gavin 都强烈警告过不要用它</a>。但平心而论，脑钱包其实还是一个非常不错的在线工具，这样关闭未免有些矫枉过正了。因此，我打算在 Heroku 上重新开一个镜像。<br>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Brainwallet" scheme="http://imcoddy.github.io/tags/brainwallet/"/>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Heroku" scheme="http://imcoddy.github.io/tags/heroku/"/>
    
      <category term="Tech" scheme="http://imcoddy.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Alias For Your Git Branches]]></title>
    <link href="http://imcoddy.github.io/2015/10/05/alias-your-git-branches/"/>
    <id>http://imcoddy.github.io/2015/10/05/alias-your-git-branches/</id>
    <published>2015-10-05T12:23:00.000Z</published>
    <updated>2015-11-01T01:07:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/git-branch_zps9p0s7kro.jpg" alt="git-branch"> </p>
<p>今天手头上工作的项目终于从 SVN 迁移到 Git 上了。其实这事本身对我来说没有什么太大影响，因为在此之前就直接用 git-svn 一直开发着，现在只不过换了一下提交的方式而已，所以当同事在推进的时候基本也没有怎么关心。直到项目迁移完了，才发现遇到了一个问题。</p>
<a id="more"></a>
<p>问题是这样：原先的 SVN 里面，根据环境的不同，设置了 development, test, sandbox, production 四个不同的分支，而本次迁移为了保持一致，git 里建立的分支的名字也照样存留了下来。　　　</p>
<p>虽然 Git 里面对分支的管理十分宽松，而分支之间其实也没有所谓的等级观念。不过这样一换之后，原先的不少习惯就变得不一致了。比如我平时习惯了 git-flow 的流程，开始分支在 develop 上，每增加一个功能就开一个 feature 分支，最后测试完之后再合并到 master 上。而这样一换，原先习惯将 <figure class="highlight"><figcaption><span>checkout develop``` 缩略成 ```gcod``` 的诸多 aliases 现在就完全没法用了。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;&#20889;&#20195;&#30721;&#22043;&#65292;&#24403;&#28982;&#26159;&#33021;&#23569;&#25970;&#19968;&#19979;&#38190;&#30424;&#23601;&#23613;&#37327;&#23569;&#21862;&#12290;&#34429;&#28982;&#35797;&#20102;&#19968;&#19979; ```git branch alias``` &#26080;&#27861;&#25104;&#21151;&#65292;&#19981;&#36807;&#25628;&#32034;&#20102;&#19968;&#19979;&#65292;&#22312; [StackOverflow](http://stackoverflow.com/questions/549920/is-it-possible-to-alias-a-branch-in-git/549949#549949) &#25214;&#21040;&#35299;&#20915;&#30340;&#26041;&#26696;&#12290;&#9;&#10;&#10;``` sh&#10;git symbolic-ref refs/heads/develop refs/heads/development&#10;git symbolic-ref refs/heads/master refs/heads/production</span><br></pre></td></tr></table></figure></p>
<p>再用 <figure class="highlight"><figcaption><span>branch``` 看一下，发现 Git 支持得还是很不错的：</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;``` sh&#10;&#62; gb&#10;  develop -&#62; development&#10;  development&#10;* feature/1540-shorten-click-session&#10;  master -&#62; production&#10;  production</span><br></pre></td></tr></table></figure></p>
<p>于是，又可以很开心滴用之前习惯的操作啦。</p>
<p>最后，发现现在对这些新特征关心度少了，前阵子 Git 刚出了 2.6 版也只是看了一下更新日志，<a href="https://www.apple.com/osx/elcapitan-preview/" target="_blank" rel="external">OS X El Capitan</a> 出来也只是刚下载好却一直没安装。也不知道这样慢慢变得不爱折腾是不是一件好事。不过这几个月想写的博客一直都没有没有整理出来，抽空得再更新一下才是。　</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/git-branch_zps9p0s7kro.jpg" alt="git-branch"> </p>
<p>今天手头上工作的项目终于从 SVN 迁移到 Git 上了。其实这事本身对我来说没有什么太大影响，因为在此之前就直接用 git-svn 一直开发着，现在只不过换了一下提交的方式而已，所以当同事在推进的时候基本也没有怎么关心。直到项目迁移完了，才发现遇到了一个问题。</p>]]>
    
    </summary>
    
      <category term="Dairy" scheme="http://imcoddy.github.io/tags/dairy/"/>
    
      <category term="Git" scheme="http://imcoddy.github.io/tags/git/"/>
    
      <category term="Hack" scheme="http://imcoddy.github.io/tags/hack/"/>
    
      <category term="Tip" scheme="http://imcoddy.github.io/tags/tip/"/>
    
      <category term="Tech" scheme="http://imcoddy.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PassworK - A Little Work Over Your Password]]></title>
    <link href="http://imcoddy.github.io/2015/07/25/passwork-a-little-work-over-your-password/"/>
    <id>http://imcoddy.github.io/2015/07/25/passwork-a-little-work-over-your-password/</id>
    <published>2015-07-25T07:10:02.000Z</published>
    <updated>2015-11-01T01:07:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://passwork.herokuapp.com/assets/images/64aa250e.passwork-256x256.png" alt=""></p>
<p>很早之前就打算写一个密码生成工具来辅助生成密码了。趁着最近 Lastpass Premium 到期，终于将它实现出来。网址为<a href="https://passwork.herokuapp.com/" target="_blank" rel="external">https://passwork.herokuapp.com/</a>，欢迎大家使用。</p>
<a id="more"></a>
<h2 id="设计原因">设计原因</h2><p>只所以写这个工具，是因为大部分用户还是习惯性的在不同的网站上设置相同的密码，而且密码的内容也十分简单，如用生日“19880219”或者姓名缩写+电话“jzm13018923223”。这样只要一个网站的密码被盗后，其它网站上的帐户也很容易受到影响。</p>
<h2 id="使用方法">使用方法</h2><p>PassworK 正是为了解决这一问题而诞生的。其用法也很简单：通过用户输入的自定义字符串，生成一个比较复杂的密码。用户所定义的字符串可以分成两部分：固定语和变化语。前者是自己设计的短语，可以包含空格或其它的标点符号，长度也可以超过 16 位，只需要用户能够确保自己能完全记得住（切记一定要自己能记住，否则就算只差了一个空格，生成的密码也会完全不一样）；后者则是随着要登陆的网站不同而变化的信息，比如网站的域名。</p>
<p>例如，假设我以“MyPassworK”作为固定的密语，要登陆的网站的域名为变化语，那么可以得到如下的结果：</p>
<pre><code><span class="variable">MyPassw0rK</span> + facebook → f<span class="variable">Cb5ADZh2pQpK5Lq</span>
<span class="variable">MyPassworK</span> + twitter → <span class="variable">HZrqB6YYBBdW98GC</span>
<span class="variable">MyPassworK</span> + google → <span class="variable">HUL17S6dePbyriCQ</span>
...
</code></pre><p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/PassworK_zpsb3bcsnpa.png" alt=""></p>
<p>通过这样的设置之后，就可以在只记住自己所设定的固定语这一个密码的情况下，为不同的网站创建容易生成而不重复的密码。</p>
<h2 id="高级用法">高级用法</h2><p>尽管 PassworK 的推荐用法如上所示，用户实际上完全可以设置自己的密码生成规则。例如将固定语中的“MyPassworK”改成“MyPassw0rK”，同时将变化语中的域名部分的第二个字母变成大写。这将得到如下的结果：</p>
<pre><code>MyPassw<span class="number">0</span>rK + fAcebook → <span class="title">M7</span>WS<span class="number">5</span>L<span class="number">54</span><span class="keyword">G6</span>QK<span class="number">97</span>F<span class="number">6</span>
MyPassw<span class="number">0</span>rK + tWitter → XMYCxGcEarF<span class="number">3</span>sCQR
MyPassw<span class="number">0</span>rK + gOogle → SwyqE<span class="number">4</span>UMuMf<span class="number">6</span>oTPR
...
</code></pre><p>甚至再将其颠倒过来，得到如下的结果：</p>
<pre><code>fAcebook + MyPassw<span class="number">0</span>rK → Q<span class="number">9</span><span class="label">Nt24</span>mPXTSD<span class="label">NFC5</span>
tWitter + MyPassw<span class="number">0</span>rK → <span class="number">4</span>K<span class="number">5</span>H<span class="number">2</span>YAmfxidJHyA
gOogle + MyPassw<span class="number">0</span>rK → KEfq<span class="label">nLuGEoGf5</span>giy
...
</code></pre><p>一个更好的办法是，用户根据自己要登陆的账号的重要程度，分别设置两到三个不同的固定语，从而可以更大程度上保护自己账号的安全。</p>
<p>同时，PassworK 还可将生成的密码以 QR 码的形式显示出来，例如用户要在不安全的电脑（例如网吧或者他人可能感染了病毒的电脑）上登陆时，可以在保证自己手机在可信任状态下（例如没有越狱过的 iPhone 上面）生成密码，再通过电脑摄像头进行读取。</p>
<h2 id="实现原理">实现原理</h2><p>加密算法可以有很种多。 PassworK 受 Brainwallet 的启发，通过用 Bitcore 库，对用户输入的内容进行组合，然后生成一个比特币脑钱包地址。再将其秘钥所对应的字符串进行截取，用第三至第十八位字符作生成的密码。</p>
<p>由于每一个确定的输入都能得到一个确定的比特币地址，所以，只要用户能确保自己记得所设定的暗语，就可以得到相同的密码。</p>
<p>以 MyPassw0rK + fAcebook 为例子，这两个短语组合后可以得到字符串MyPassworKfacebook，将这作为输入，可以得到如下的结果（这一点可以在 <a href="https://brainwallet.org/" target="_blank" rel="external">Brainwallet</a> 上进行验证）：</p>
<pre><code>Secret <span class="string">Exponent:</span> f2c2d825155bb3860d80247c243c4acec2a04fc578f1ba5db350390b5e2d4379
Point <span class="string">Conversion:</span> Uncompressed
Private <span class="string">Key:</span> <span class="number">5</span>KfCb5ADZh2pQpK5Lqvr2P86aXj43enZ4FL78yFbF52nYY58FJf
<span class="string">Address:</span> <span class="number">1</span>JnB64zCAYS6KJ4WqdsBoXU71io9193wdP
</code></pre><p>而所生成的密码 fCb5ADZh2pQpK5Lq，便来自上面的私钥。</p>
<h2 id="安全分析">安全分析</h2><p>尽管比特币脑钱包并不被大众推荐，脑钱包所生成的私钥在格式上与其他并无二异。问题在于如果用户所设计的暗语过于简单的话，很有可能会受到暴力破解。换句话说，如果选择的暗语足够独特（例如 8299c2360c05bd4207014da2228b54d54db34236，PassworK 的第一个 commit ID ），被破解的概率与随机生成一个含有余额的比特币私钥其实差别不大。</p>
<p>同时，从生成机制上说，PassworK 所生成的密码受比特币地址的规则所限，仅包含 Base58 所允许的字符。尽管密码里没有标点或许会让某些高级用户觉得不够安全，但这也很好地避免了某些网站不允许设置标点作为密码从而提高了兼容性。毕竟，PassworK 解决的问题是，提供了一种简单易记的方式生成一个较高强度的密码。如果有更高的要求，请购买 1Password 或者 Lastpass 的服务，或者自行修改源码配置自己的字符映射表。</p>
<h2 id="支持捐助">支持捐助</h2><ul>
<li>如果你觉得 PassworK 对你能有所帮助，请推荐给你的朋友，网络安全的意识提升需要大家的共同努力。</li>
<li>如果你对 PassworK 有任何的意见或建议，欢迎与我联系。</li>
<li>如果你喜欢 PassworK，请向 <a href="https://blockchain.info/address/1DNpE2i4H4bCRd6ezcgv3bL13Uc8GCEEPo" target="_blank" rel="external">1DNpE2i4H4bCRd6ezcgv3bL13Uc8GCEEPo</a> 进行捐赠。</li>
<li>如果你对这种方式生成的密码的安全性还有疑虑，上面的地址就是用这种方式生成的，如果你能猜出我的密码的话欢迎将里面的币取走，不过之后烦请告诉我一下 ┗(°0°)┛</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://passwork.herokuapp.com/assets/images/64aa250e.passwork-256x256.png" alt=""></p>
<p>很早之前就打算写一个密码生成工具来辅助生成密码了。趁着最近 Lastpass Premium 到期，终于将它实现出来。网址为<a href="https://passwork.herokuapp.com/">https://passwork.herokuapp.com/</a>，欢迎大家使用。</p>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Development" scheme="http://imcoddy.github.io/tags/development/"/>
    
      <category term="PassworK" scheme="http://imcoddy.github.io/tags/passwork/"/>
    
      <category term="Project" scheme="http://imcoddy.github.io/tags/project/"/>
    
      <category term="Security" scheme="http://imcoddy.github.io/tags/security/"/>
    
      <category term="Diary" scheme="http://imcoddy.github.io/categories/diary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Map Filco Minila Air To HHKB]]></title>
    <link href="http://imcoddy.github.io/2015/07/18/map-filco-minila-air-to-hhkb/"/>
    <id>http://imcoddy.github.io/2015/07/18/map-filco-minila-air-to-hhkb/</id>
    <published>2015-07-18T13:11:51.000Z</published>
    <updated>2015-12-23T05:46:58.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/FFKB67MEB_01_zpsxutue3it.jpg" alt=""><br>两年前买了 Mac Mini 的时候入手了 HHKB 的 lite 版，用到现在其实都挺顺手的。不过毕竟是薄膜版，一时兴起忽然想换台机械键盘试试。网上看了一下推荐，觉得 60 多键的小键盘对于自己来说已经够用。于是经过网上查阅一阵后，目光定在了 Filco 不久前出来的 Minila 蓝牙版。上个月父亲节的时候到 BicCamera 试用了一下之后，当场便花了 14000 日元捧了一台回家。到现在用了一个多月，是时候记录一下使用的感受了。</p>
<a id="more"></a>
<p>之所以选择这款键盘，是觉得桌上的东西实在有点多，想换一台感受一下无线的快感。至于键盘的轴，店里其实青茶赤黑轴都有现货，当时试的时候也的确觉得青轴的使用感觉最爽，不过最终选择的是 67 键的 US 红轴版。而经过这一个月的使用后，真心觉得当时的选择是十分明智，因为现在再用 HHKB 的键盘都觉得很费力气:)</p>
<p>作为一款小键盘，Minila 的布局是十分紧凑的。和之前的 HHKB Lite 相比，它除了左边多了一个 Ctrl 键之外，右边还有 App 键和 Delete 键。同时因为右下的方向键也不像 HHKB Lite 那样单独缩小化，使得右边的 Shift 变得小了许多，而且和其它的键盘相比这整排的键都向左偏移了一些，需要一些时间去适应。</p>
<p>另外说到这款键盘，不得不提一下它的最大特色：将长空格缩短并增加了双 Fn 键。虽然 Filco 还为此特别申请了专利，但实际情况是造成了很多人在购买这款键盘前难免犹豫一下，因为这空格实在是太短了！当然，背后的 DIP 开关可以将 Fn 映射成空格键在一定的程度上可以弥补一下，但大拇指有时还是会落在两键之间的空隙里面，偶尔还是会觉得稍有不爽。至于说按 Fn+ESDF 来当方向键的功能对我来说远不如 Opt+HJKL 来得习惯。所以，双 Fn 其实对我来说没有什么实在的好处。好在有神器 Karabiner，虽然无法直接捕获到 Fn 的信号。但在将 Fn 当空格后可以设置成空格+其它键时能当作 Cmd+其它键，其实用起来更加方便。<br>（其实 Fn 也是有可能要实现软件映射的，不过首先需要进行物理跳线，看了这篇<a href="https://github.com/tekezo/Karabiner/issues/320" target="_blank" rel="external">帖子</a>之后感觉真是城里人真会玩-_-)</p>
<p>由于之前用 HHKB 习惯了，新的 Minila 自然也是先想着往上靠。其实两者本来就已经很相像，在用 DIP 开关将 Ctrl 和 Capslock 对调、Backspace 和 | 对调之后，两者的相似程度已经达到了 98%！ 再通过 Karabiner 将 | 和 ` 两个键交换之后，这两款键盘的基本键位布局就基本上完全一样了。<br><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/hhkb-vs-filco-minila_zps1x9usogx.jpg" alt=""></p>
<p>或许会有人问，为什么这么储心积虑地想把这键盘折腾成 HHKB 而不如直接买一把。没办法，HHKB 家常年不思进取一直没有出蓝牙版啊。而且当天试了一下，就算是电容版的感觉也没 Filco 好。传说中的程序员终极键盘 HHKB Pro2 Type-S，也许也并不合适我哈哈。</p>
<p>最后，如果真要问我 Minila 用起来不爽的地方是什么，也许唯一可惜的就只有键盘上的 Win 字样让人觉得不快了。虽然侧面有刻着 Cmd 字样，不过这毕竟还是面向 Windows 系列的意味更加明显一些吧。当然，如果 Filco 能默认提供 DIP 互换 Opt 和 Cmd 键的话，就真是再好不过了。话说回来，好在自己已经打字不看键盘的了，只是心理上不太好受吧 :P</p>
<p>最后，还是要感叹一下，如果不是有了 Karabiner 这样伟大的软件，很难做到让不同的键盘体验能一致吧。改天再分享整理一下自己的相关配置。</p>
<p>PS: 因为有了新键盘，从而可以把 MBP 放一边，然后就可以愉快地将屏幕竖起来，常年受压迫的颈椎终于好受不少啦~<br><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/rotate-display-monitor_zpsvfc0ypvj.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/FFKB67MEB_01_zpsxutue3it.jpg" alt=""><br>两年前买了 Mac Mini 的时候入手了 HHKB 的 lite 版，用到现在其实都挺顺手的。不过毕竟是薄膜版，一时兴起忽然想换台机械键盘试试。网上看了一下推荐，觉得 60 多键的小键盘对于自己来说已经够用。于是经过网上查阅一阵后，目光定在了 Filco 不久前出来的 Minila 蓝牙版。上个月父亲节的时候到 BicCamera 试用了一下之后，当场便花了 14000 日元捧了一台回家。到现在用了一个多月，是时候记录一下使用的感受了。</p>]]>
    
    </summary>
    
      <category term="Diary" scheme="http://imcoddy.github.io/tags/diary/"/>
    
      <category term="HHKB" scheme="http://imcoddy.github.io/tags/hhkb/"/>
    
      <category term="Hardware" scheme="http://imcoddy.github.io/tags/hardware/"/>
    
      <category term="Karabiner" scheme="http://imcoddy.github.io/tags/karabiner/"/>
    
      <category term="Keyboard" scheme="http://imcoddy.github.io/tags/keyboard/"/>
    
      <category term="Tweak" scheme="http://imcoddy.github.io/tags/tweak/"/>
    
      <category term="Diary" scheme="http://imcoddy.github.io/categories/diary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atom: The Hacking Editor Of Your Choice]]></title>
    <link href="http://imcoddy.github.io/2015/06/26/atom-the-hacking-editor-of-your-choice/"/>
    <id>http://imcoddy.github.io/2015/06/26/atom-the-hacking-editor-of-your-choice/</id>
    <published>2015-06-26T13:04:41.000Z</published>
    <updated>2015-11-01T01:07:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/github-s-atom-editor-reaches-1-0-maturity_zpshmfxfpbo.jpg" alt=""><br>经过了长达一年的 Beta 公众测试之后，Atom，这个号称可 Hack 的面向 21 世纪的文本编辑器，正式更新到了 1.0 版。虽然没有在其推出之初就用上（以前还是需要邀请码才能用的呢），但在最近刷 Leetcode 的时候，深感这款编辑器的可定制性和方便程度远超其它。而前阵子微软推出的新 IDE 和 Facebook 推出的 Nuclide 都基于 Atom，颇让人有种天下编辑器苦人久矣之感。是以在这个特别的日子里，有必要为其记上一笔。<br><a id="more"></a></p>
<h2 id="巨人的肩膀">巨人的肩膀</h2><p>对于程序员而言，世界上的编辑器只有三种：Vim，Emacs，和其它。而对于我这样的 Vim 党而言，虽然 Vim 和 Emacs 的学习成本稍有些高，但在经历了一段磨合期之后，的确深感到其设计的优越性，让你的手在最小的移动范围内能高效实现各种操作。而且两者的定制程度都很高，配合着各种插件，可以将输入体验提高到一个的新的层次。</p>
<p>可是，这两个 70 年代里诞生的软件，现在看来，终究还是显得有些过时了。除了界面经常让一些习惯用鼠标点来点去的用户觉得难以上手之外，其架构也使得在它上面进行功能扩展并不方便（无论是插件的编写语法还是兼容维护）。虽然对于程序员而言了解基本的 Vim 用法还是非常有必要，但对于非 Linux/Unix 的用户而言，更多人选择了”界面更友好”的其它编辑器。</p>
<p>这里面不乏有各种优秀应用，例如 Notepad++，TextMate，Sublime 等等。而 Atom 作为后起之秀，有着更加远大的理想。</p>
<h2 id="为何选用_Atom">为何选用 Atom</h2><p>对于每个 Atom 的新用户而言，这是一个必问的问题。Atom 的其官方手册上给出了<a href="https://atom.io/docs/latest/getting-started-why-atom" target="_blank" rel="external">这样的答案</a>：</p>
<p>这个世界上有那么多种编辑器，为什么你要花时间学习和使用 Atom 呢？</p>
<p>虽然 Sublime 和 TextMate 之类的编辑器已经非常好用了，但它们仅提供了很有限的拓展性。而在另一个极端，Emacs 和 Vim 提供了灵活的拓展性，但它们并不是很友好，需要使用专用的编程语言来配置和拓展。</p>
<p>我们觉得我们可以做得更好。我们的目标是在保证易用性的同时提供充分的可拓展性（hackability）：这个编辑器会受到第一天学习编程的新生欢迎，而且当他们成长为编程专家时也难以割舍。</p>
<p>当我们使用 Atom 来开发 Atom 的时候，随着它的逐渐完善，我们愈发觉得已经离不开它了。从表面上来看，Atom 是一个能满足你的期待的，现代化的桌面文本编辑器，而在表面之下，这是一个值得你去一同完善的系统。</p>
<h2 id="超强的可定制性">超强的可定制性</h2><p>如上所述，如果说 Vim 和 Emacs 凝聚的是上个世纪文本编辑器的精华。那么 Atom 则将其思想进一步发扬光大。由于采用了 NodeWebkit 技术（Github 公司为了改进这技术还专门把 NodeWebkit 作者雇用了让他专职开发），在 Atom 里面，每一个窗口实际上都是一个本地渲染的网页。同时由于其良好的扩展性，用户可以用 JS 和 HTML5 语言在上面开发各种扩展。这大大降低了开发插件的难度，是以在短短的一年之内，围绕 Atom 所建的主题超过 500 多个，插件更是超过了 2000 多件。</p>
<p>相关的插件都可以在 <a href="https://atom.io/packages/" target="_blank" rel="external">https://atom.io/packages/</a> 上进行查找。 个人所安装的插件列表<a href="https://github.com/imcoddy/.dotfiles/blob/feature/mac-home/atom/packages.txt" target="_blank" rel="external">如下</a>：</p>
<pre><code>atom-beautify
atom-color-<span class="keyword">highlight</span>
atom-ctags
atom-pair
autocomplete-plus
autocomplete-snippets
color-picker
comment
dash
easy-motion
editor-stats
emmet
<span class="keyword">ex</span>-<span class="built_in">mode</span>
<span class="keyword">file</span>-icons
<span class="keyword">filetype</span>-color
git-plus
git-<span class="keyword">tab</span>-status
<span class="keyword">highlight</span>-<span class="built_in">line</span>
<span class="keyword">highlight</span>-selected
japanese-wrap
jshint
<span class="keyword">language</span>-scheme
linter
linter-coffeelint
linter-jshint
merge-conflicts
minimap
minimap-<span class="keyword">highlight</span>-selected
mocha-test-runner
<span class="keyword">open</span>-<span class="keyword">last</span>-project
pretty-json
project-manager
remote-<span class="keyword">edit</span>
script
seti-monokai
seti-ui
symbols-tree-<span class="keyword">view</span>
terminal-status
todo-show
<span class="keyword">vim</span>-<span class="built_in">mode</span>
<span class="keyword">vim</span>-surround
</code></pre><p>长长的列表可能让人觉得管理起来会很麻烦，但这正是 Atom 的强大之处。在安装好 Atom 后它会在系统里面加上一个 <code>apm</code> 的命令，将上面的脚本保存到一个 packages.txt 文件里，配合一个简单的脚本，安装插件只在一念之中：</p>
<pre><code>&gt; <span class="keyword">cat</span> install.<span class="keyword">sh</span>
<span class="keyword">while</span> <span class="keyword">read</span> p; <span class="keyword">do</span>
  apm install <span class="label">$p</span>
done &lt; packages.txt
</code></pre><p>更关键的一点是，不光是插件的管理可以用文本化，插件的配置也会全部放到 ~/.atom 目录下面，并以 cson 文件格式进行保存。这就意味着，只要通过 Github 之类的服务进行托管，就能很快的将其部署到新机器上，使得在新环境也能很快将 Atom 配置成自己习惯的样子！个人的配置<a href="https://github.com/imcoddy/.dotfiles/blob/feature/mac-home/atom/config.cson" target="_blank" rel="external">如下</a>：</p>
<pre><code><span class="string">"*"</span>:
  <span class="string">"exception-reporting"</span><span class="keyword">: {</span><span class="keyword">}</span>
  welcome:
    showOnStartup: <span class="keyword">false</span>
  core:
    themes: [
      <span class="string">"one-light-ui"</span>
      <span class="string">"one-light-syntax"</span>
    ]
    disabledPackages: [
      <span class="string">"atom-ctags"</span>
      <span class="string">"atom-pair"</span>
      <span class="string">"atom-color-highlight"</span>
      <span class="string">"editor-stats"</span>
      <span class="string">"emmet"</span>
      <span class="string">"exception-reporting"</span>
      <span class="string">"git-plus"</span>
      <span class="string">"git-tab-status"</span>
      <span class="string">"language-scheme"</span>
      <span class="string">"linter-coffeelint"</span>
      <span class="string">"feedback"</span>
      <span class="string">"git-plus"</span>
      <span class="string">"git-tab-status"</span>
      <span class="string">"metrics"</span>
      <span class="string">"merge-conflicts"</span>
      <span class="string">"minimap"</span>
      <span class="string">"minimap-highlight-selected"</span>
      <span class="string">"mocha-test-runner"</span>
      <span class="string">"symbols-view"</span>
      <span class="string">"symbols-tree-view"</span>
      <span class="string">"terminal-status"</span>
      <span class="string">"welcome"</span>
    ]
    followSymlinks: <span class="keyword">true</span>
  editor:
    <span class="keyword">invisibles: {</span><span class="keyword">}</span>
    softWrap: <span class="keyword">true</span>
    showIndentGuide: <span class="keyword">true</span>
    showInvisibles: <span class="keyword">true</span>
    softWrapAtPreferredLineLength: <span class="keyword">true</span>
    fontSize: <span class="number">14</span>
    lineHeight: <span class="number">1.2</span>
    tabLength: <span class="number">4</span>
  <span class="string">"filetype-color"</span>:
    <span class="literal">enabled</span>: <span class="string">"false"</span>
  <span class="keyword">linter: {</span><span class="keyword">}</span>
  <span class="string">"terminal-status"</span><span class="keyword">: {</span><span class="keyword">}</span>
  <span class="string">"atom-beautify"</span>:
    analytics: <span class="keyword">false</span>
    muteUnsupportedLanguageErrors: <span class="keyword">true</span>
    language_coffeescript_beautify_on_save: <span class="keyword">true</span>
    language_css_beautify_on_save: <span class="keyword">true</span>
    language_csv_beautify_on_save: <span class="keyword">true</span>
    language_html_beautify_on_save: <span class="keyword">true</span>
    language_js_beautify_on_save: <span class="keyword">true</span>
    language_json_beautify_on_save: <span class="keyword">true</span>
    language_scss_beautify_on_save: <span class="keyword">true</span>
    language_ruby_disabled: <span class="keyword">true</span>
    language_python_beautify_on_save: <span class="keyword">true</span>
  <span class="string">"vim-mode"</span>:
    useClipboardAsDefaultRegister: <span class="keyword">true</span>
    useSmartcaseForSearch: <span class="keyword">true</span>
  <span class="string">"japanese-wrap"</span>:
    <span class="keyword">characterWidth: {</span><span class="keyword">}</span>
    <span class="keyword">lineBreakingRule: {</span><span class="keyword">}</span>
  <span class="keyword">emmet: {</span><span class="keyword">}</span>
  <span class="string">"autocomplete-plus"</span>:
    confirmCompletion: <span class="string">"tab and enter"</span>
    includeCompletionsFromAllBuffers: <span class="keyword">true</span>
  minimap:
    plugins:
      <span class="string">"highlight-selected"</span>: <span class="keyword">true</span>
  <span class="string">"atom-ctags"</span><span class="keyword">: {</span><span class="keyword">}</span>
  <span class="string">"atom-pair"</span><span class="keyword">: {</span><span class="keyword">}</span>
  <span class="string">"atom-color-highlight"</span><span class="keyword">: {</span><span class="keyword">}</span>
  <span class="string">"linter-jshint"</span><span class="keyword">: {</span><span class="keyword">}</span>
  <span class="string">"vim-surround"</span><span class="keyword">: {</span><span class="keyword">}</span>
  autosave:
    <span class="literal">enabled</span>: <span class="keyword">true</span>
  script:
    scrollWithOutput: <span class="keyword">false</span>
</code></pre><p>至于其它的，还可以自定义 snippets，shortcuts 之类的，就不在这里一一描述了。但从上应该已经能体会到，只要你乐意去改，很多东西都是能 Hack 的，毕竟 Atom 从一开始就定位如此了:P</p>
<h2 id="遗憾之处">遗憾之处</h2><p>虽然 Atom 的确有许多优秀的地方，我也通过定制尽可能地将 Vim 上的操作习惯迁移到了 Atom 上来。不过在使用 Atom 期间，还是遇到了一些小问题或不快的地方。</p>
<ol>
<li>启动稍慢<br>虽然打开后的反应还是很及时，但在启动的时候速度还是相对慢了一些。如果插件安装得比较多的话，有时可能需要等上数十秒。相比之下，基本 Atom 开发的微软 Code IDE 似乎快上不少，看来 Atom 应该还有不少待优化的地方。</li>
<li>部分插件功能太弱<br>Vim 里面的 NerdCommenter 提供了许多强大的代码注释功能，可以快速地进行状态切换。这点在调试代码的时候非常有用。而 Atom 里面暂时还没有个较好的替代，而且唯一现在有的在家里的 Mac Mini 上还不能正常使用。其它的快速跳转和添加配对括号的插件也不是很顺手，内置的 Terminal 似乎也无法读取本地的 .zshrc 配置导致用得不习惯。这一些小问题，只能期待社区更加给力一点了。</li>
<li>远程编辑功能缺失<br>不知道是我没有找对还是怎么回事，现有的 RemoteEdit 和Nuclide-server 都无法满足我的需求，使得在公司电脑上想在本地写 VM 里面的代码还是一种奢望。</li>
</ol>
<p>虽然稍有遗憾，但 Atom 的良好可定制性，还是深深地赢得了我的欢心。也相信随着 1.0 版的面世，这款编辑器将会变得更加强大。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://i1375.photobucket.com/albums/ag455/imcoddy/Blog/github-s-atom-editor-reaches-1-0-maturity_zpshmfxfpbo.jpg" alt=""><br>经过了长达一年的 Beta 公众测试之后，Atom，这个号称可 Hack 的面向 21 世纪的文本编辑器，正式更新到了 1.0 版。虽然没有在其推出之初就用上（以前还是需要邀请码才能用的呢），但在最近刷 Leetcode 的时候，深感这款编辑器的可定制性和方便程度远超其它。而前阵子微软推出的新 IDE 和 Facebook 推出的 Nuclide 都基于 Atom，颇让人有种天下编辑器苦人久矣之感。是以在这个特别的日子里，有必要为其记上一笔。<br>]]>
    
    </summary>
    
      <category term="App" scheme="http://imcoddy.github.io/tags/app/"/>
    
      <category term="Config" scheme="http://imcoddy.github.io/tags/config/"/>
    
      <category term="Editor" scheme="http://imcoddy.github.io/tags/editor/"/>
    
      <category term="Hack" scheme="http://imcoddy.github.io/tags/hack/"/>
    
      <category term="Mac" scheme="http://imcoddy.github.io/tags/mac/"/>
    
      <category term="OSX" scheme="http://imcoddy.github.io/tags/osx/"/>
    
      <category term="Tech" scheme="http://imcoddy.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Link It In The Hard Way]]></title>
    <link href="http://imcoddy.github.io/2015/06/19/link-it-in-the-hard-way/"/>
    <id>http://imcoddy.github.io/2015/06/19/link-it-in-the-hard-way/</id>
    <published>2015-06-19T13:01:51.000Z</published>
    <updated>2015-12-23T05:42:25.000Z</updated>
    <content type="html"><![CDATA[<p>又一阵子没有写博客了。最近晚上回到家打开电脑后，基本都是在上 Leetcode 刷题。其实最近有好几件事都可以写写，不过认真想想，从启动电脑到输入 Hexo 命令再打开 Atom 编辑器码字，实在是有些显得繁琐不堪。今天一时心血来潮，购买了 iPad 上传说中的编辑神器 <a href="https://itunes.apple.com/us/app/editorial/id673907758?mt=8" target="_blank" rel="external">Editorial</a>，然后又有了一个折腾的想法，将博客的撰写转移到 iPad 上。<br><a id="more"></a><br>这个想法其实并不新鲜，毕竟有了 Dropbox 之类的同步软件之后，只要有网络，基本上可以实现设备之间的无缝切换。因此，只需要在灵感来临之时掏出 iPhone 或者 iPad 上随时随地记录一下，然后等打开电脑时再发布即可。</p>
<p>不过在这之前，还是遇到了一点小麻烦。</p>
<h2 id="情况说明">情况说明</h2><p>现在这个博客是用 Hexo 生成的，目录放在 <code>/Users/imcoddy/Blog/</code> 下面，代码和网页都托管在 Github 上。现在要做的，只需要将 Blog 下的 <code>_posts</code> 链接到 Dropbox 里面即可。</p>
<p>在 iPad 里面将 Editorial 与 Dropbox 关联之后，即会在 <code>Apps</code> 目录下出现一个同名的文件夹，因此，决定将目标路径设置为 <code>/Users/imcoddy/Dropbox/Apps/Editorial/Blog/Posts</code>。</p>
<p>不过现在是很残酷的，ln 命令不允许直接做文件夹的硬链接。终端里面执行结果如下：</p>
<pre><code>/Users/imcoddy [<span class="link_label">imcoddy@iMac</span>] [<span class="link_label">22:44</span>][<span class="link_reference">1</span>]
<span class="blockquote">&gt; ln /Users/imcoddy/Blog/source/_posts /Users/imcoddy/Dropbox/Apps/Editorial/Blog/Posts</span>
ln: /Users/imcoddy/Blog/source/_posts: Is a directory
</code></pre><h2 id="解决方案">解决方案</h2><p>一个很简单的方案是将 Blog 下面的 <code>_posts</code> 文件夹删除，在 Dropbox 里面建立好文件夹后再将其通过软链接的方式链接过来。虽然这种方案很简单快捷，不过也有一个不好的结果：<code>_posts</code> 文件夹下的 md 文件将不再被 Git 所管理。更好的方案自然是在 Blog 里面正常编辑发布，而相关的 md 文件能自动同步到 Dropbox 里。</p>
<p>Google 一番之后，发现 Stackoverflow 上有个<a href="http://stackoverflow.com/questions/80875/what-is-the-unix-command-to-create-a-hardlink-to-a-directory-in-os-x" target="_blank" rel="external">解答</a>说得很详细，也说得很吓人。要想在 Mac 上建立文件夹的硬链接，需要先满足下面的几个条件：</p>
<ol>
<li>The file system must be journaled HFS+.</li>
<li>The parent directories of the source and destination must be different.</li>
<li>The source’s parent must not be the root directory.</li>
<li>The destination must not be in the root directory.</li>
<li>The destination must not be a descendent of the source.</li>
<li>The destination must not have any ancestor that’s a directory hard link.</li>
</ol>
<p>给出的解决方案倒很简单。<br>首先编译如下的文件</p>
<pre><code><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span>
<span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span>
<span class="function"><span class="keyword">int</span>
<span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span>
</span>{
   <span class="keyword">if</span> (argc != <span class="number">2</span>)
      <span class="keyword">return</span> <span class="number">1</span>;
   <span class="keyword">int</span> ret = unlink(argv[<span class="number">1</span>]);
   <span class="keyword">if</span> (ret != <span class="number">0</span>)
      perror(<span class="string">"unlink"</span>);
   <span class="keyword">return</span> ret;
}

gcc -o hunlink hunlink.c
</code></pre><p>使用的时候，只需要 <code>hlink source_folder target_folder</code> 即可。</p>
<p>再 Google 一番，其实<a href="https://github.com/selkhateeb/hardlink" target="_blank" rel="external">这个功能</a>已经有人在 Homebrew 上发布了。因此，要做的就简单多了：</p>
<pre><code>/Users/imcoddy [<span class="link_label">imcoddy@iMac</span>] [<span class="link_label">22:44</span>][<span class="link_reference">1</span>]
<span class="blockquote">&gt; brew install hardlink-osx</span>
==&gt; Downloading https://homebrew.bintray.com/bottles/hardlink-osx-0.1.1.yosemite.bottle.t
<span class="header">######################################################################## 100.0%</span>
==&gt; Pouring hardlink-osx-0.1.1.yosemite.bottle.tar.gz
==&gt; Caveats
Hardlinks can not be created under the same directory root. If you try to
<span class="code">`hln source directory`</span> to target directory under the same root you will get an error!

Also, remember the binary is named <span class="code">`hln`</span> due to a naming conflict.
==&gt; Summary
🍺  /usr/local/Cellar/hardlink-osx/0.1.1: 3 files, 20K
<span class="blockquote">&gt; hln /Users/imcoddy/Blog/source/_posts /Users/imcoddy/Dropbox/Apps/Editorial/Blog/Posts</span>
<span class="blockquote">&gt; hln /Users/imcoddy/Blog/source/_drafts /Users/imcoddy/Dropbox/Apps/Editorial/Blog/Drafts</span>
</code></pre><p>然后，在 Hexo 里面新建这篇博客，打开 Atom，看着菜单栏里的 Dropbox 不时地自动同步，心情真是舒畅。</p>
<p>不过这篇文章还是在电脑上记录的，Editorial 的使用心得，就留着以后慢慢体会吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>又一阵子没有写博客了。最近晚上回到家打开电脑后，基本都是在上 Leetcode 刷题。其实最近有好几件事都可以写写，不过认真想想，从启动电脑到输入 Hexo 命令再打开 Atom 编辑器码字，实在是有些显得繁琐不堪。今天一时心血来潮，购买了 iPad 上传说中的编辑神器 <a href="https://itunes.apple.com/us/app/editorial/id673907758?mt=8">Editorial</a>，然后又有了一个折腾的想法，将博客的撰写转移到 iPad 上。<br>]]>
    
    </summary>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Homebrew" scheme="http://imcoddy.github.io/tags/homebrew/"/>
    
      <category term="Mac" scheme="http://imcoddy.github.io/tags/mac/"/>
    
      <category term="Tweak" scheme="http://imcoddy.github.io/tags/tweak/"/>
    
      <category term="Writing" scheme="http://imcoddy.github.io/tags/writing/"/>
    
      <category term="Tech" scheme="http://imcoddy.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mastering Bitcoin Ch10: Bitcoin Security]]></title>
    <link href="http://imcoddy.github.io/2015/05/28/mastering-bitcoin-chapter-10-bitcoin-security/"/>
    <id>http://imcoddy.github.io/2015/05/28/mastering-bitcoin-chapter-10-bitcoin-security/</id>
    <published>2015-05-28T14:09:48.000Z</published>
    <updated>2015-11-01T01:07:27.000Z</updated>
    <content type="html"><![CDATA[<p>前阵子李笑来老师在网上招人合译《Mastering Bitcoin》一书，受巴比特之邀自己也参与其中。由于当时时间有限，只翻译了最后的第十章。如今此书<a href="http://zhibimo.com/explore/Mastering-Bitcoin" target="_blank" rel="external">初稿</a>已经公布于众，自己也在此整理一下留个备份。从此，我也算是出过书的人了哈哈。<br><a id="more"></a></p>
<h1 id="比特币安全">比特币安全</h1><p>保护比特币件很具有挑战性的事情，因为比特币不是价值的抽象体现，就像银行账户里的余额那样。比特币其实更像数字现金或黄金。你可能听过这样的说法，“现实持有，败一胜九。”（译者注：这句谚语是指拥有实际所有权能在法律纠纷中占有很大的胜算优势）好吧，在比特币的世界里，这样的持有只能让你有一成胜率。而拥有用于解锁比特币的密钥才相当于持有现金或一块贵重金属。你可能会将其丢失，会放错地方，会被盗或者不小心支付错了数额。无论是哪种场景，用户都没有办法撤回，因为这就像是将现金丢在了车水马龙的大街上。</p>
<p>不过，与现金、黄金或者银行账户相比，比特币有着一个其它东西没有的优势。你不能“备份”现金、黄金或者银行账户，但包含着你的密钥的比特币钱包，可以像其它文件一样备份。它可以被复制多份分别保存起来，甚至能打印到纸上进行实物备份。比特币与至今为止的事物是如此不同，以致于我们需要以一种全新的思路来思考比特币的安全性。</p>
<h2 id="安全准则">安全准则</h2><p>比特币的核心准则是去中心化，这一点对其安全性具有重要意义。在集中式的模式中，例如传统的银行或支付网络，需要依赖于访问控制和审查以将不良行为者拒之门外。相比之下，比特币这样的去中心化系统则将责任和控制权交给了用户。由于网络的安全性是基于工作量证明而不是访问控制，比特币网络可以对所有人开放，也无需对比特币流量进行加密。</p>
<p>在一个传统的支付网络中，例如信用卡系统，支付是终端开放式的，因为它包含了用户的个人标识（信用卡号）。在初次支付后，任何能获得该标识符的人都可以从其所有者那反复“抽取”资金。因此，该支付网络必须采取端对端加密，确保没有窃听者或中间人可以在运输过程或存储过程中将交易数据截获。如果坏人获得该系统的控制权时，他将能攻下当前交易和支付令牌，并可用于创建新的交易。更糟的是，当客户数据被泄露时，顾客的个人信息将被身份窃贼一览无疑。他们必须立即采取行动，以防止被攻下的帐户被用来进行欺诈。</p>
<p>比特币则截然不同，一个比特币交易只授权发给指定接收方一个指定的数额，并且这不能被修改或伪造。它不会透露任何个人信息，例如当事人的身份，也不能用于授权额外的支付。因此，比特币支付网络并不需要加密或窃听保护。事实上，你可以在一个开放的公共频道，例如不安全的 WiFi 或蓝牙网络上，公开传播比特币交易的数据，这对安全性没有任何损失。</p>
<p>比特币的去中心化安全模型很大程度上将权力交到了用户手上，与之相伴的还有保管好密钥的责任。这对于大多数用户来说是并不是一件容易的事，特别是在像智能手机或笔记本电脑这种时刻联着网的通用计算设备上。虽然比特币的去中心化模型避免了常见的信用卡盗用这样的情况，但很多用户都不能保护好他们的密钥，以至于被逐个攻下。</p>
<h2 id="比特币系统安全开发">比特币系统安全开发</h2><p>对于比特币开发者而言最重要的原则是去中心化。大多数开发者对集中式的安全模型很熟悉，并可能试图将这样的模型运用到他们的比特币的应用中，这将带来灾难性的后果。</p>
<p>比特币的安全性依赖于密钥的分散控制，以及矿工们各自独立地交易验证。如果你想利用好比特币的安全性，你需要确保自己处于比特币自身的安全模型里面。简而言之，不要将用户的密钥控制权拿走，不要接受非区块链交易信息。</p>
<p>例如，许多早期的比特币交易所将所有用户的资金集中在一个包含着密钥的“热”钱包并存储在一台服务器上。这样的设计夺取了用户的掌控权，并将密钥集中到单个系统里。许多这样的系统都被黑客攻破，并给他们的客户带来灾难性的后果。</p>
<p>另一个常见的​​错误是接受离线区块链交易，妄图减少交易费或加速交易处理速度。一个“离线区块链”系统将交易数据记录在一个内部的中心化账本上，然后偶尔将它们同步到比特币区块链。这种做法，再一次，用专有和集中的方式取代比特币的去中心化安全模型。当数据处于离线的区块链上时，防护不当的集中式账本可能会被伪造、挪用资金、消耗储备而不为人知。</p>
<p>除非你是准备大力投资运营安全，增加多层次访问控制，或（像传统的银行那样）加强审计，否则在将资金从比特币的去中心化安全场景中抽离出来之前，你应该慎重考虑一番。即使你有足够的资金和纪律去实现一个可靠的安全模型，这样的设计也仅仅是复制一个脆弱不堪，深受身份盗窃、贪污和挪用公款困扰着的传统金融网络而已。要想充分利用比特币的独特的去中心化安全模型，你必须避免可能觉得眼熟的集中式架构的诱惑，因它最终将摧毁比特币的安全性。</p>
<h1 id="信任根源">信任根源</h1><p>传统的安全体系基于一个称为信任根源的概念，它指的是被当作总体系统或应用程序的安全性根基的一个可以信赖的核心。安全体系像一系列同心圆一样围绕着信任根源开发，像层层包裹的洋葱一样，信任从内至外依次延伸。每一层都构建于更可信的内层之上，通过访问控制，数字签名，加密和其他安全方式确保可信。随着软件系统变得越来越复杂，它们更可能出现问题，使得它们更容易受到安全损害。其结果是，软件系统变得越复杂，就越难维护其安全。信任根源的概念确保绝大多数的信任被置于系统一个不是过于复杂的部分，因此该系统的这部分也相对坚固，而更复杂的软件则在它之上构建。这样的安全体系随着规模扩大而不断重复出现，首先信任根源建立于单个系统的硬件内，然后将该信任根源通过操作系统扩展到更高级别的系统服务，最后逐次扩散到圈内多台服务器上。</p>
<p>比特币的安全体系与这不同。在比特币里，共识系统创建了一个可信的完全去中心化的公开账本，一个正确验证过的区块使用创世块作为信任的根源，建立一条直至当前区块的可信任链。比特币系统可以并应该使用区块链作为它们的信任根源。在设计一个包含着由多个不同的系统提供服务的复杂的比特​​币应用程序时，你应该仔细确认其安全体系，以确保对它的信任能有据可依。最终，唯一可以信任无疑的是一条完全有效的区块链。如果你的应用程序或明或暗地信赖于除了区块链的其它东西，这应该是一个值得关注的地方，因为它可能会引入漏洞。评估你的应用程序的安全体系的一个好方法是对每个组件单独考虑，假设该组件被完全攻破并被坏人掌控的场景。依次取出你的应用程序的每个组件，并评估它被攻破时对整体安全的影响。如果你的应用程序的安全性在该组件沦陷后大打折扣，那就说明你已经对这些组件过度信任了。一个没有漏洞的比特币应用程序应该只受限于比特币的共识机制，这意味着其安全体系的信任根源基于比特币最坚固的部分。</p>
<p>无数个黑客攻击比特币交易所的例子都是因为轻视了这一点，他们的安全体系和设计甚至无法通过基本的审查。这种中心化的实现方式将信任置于比特币区块链之外的诸多组件之上，例如热钱包，中心化的账本数据库，简易加密的密钥，以及许多类似的方案。</p>
<h1 id="用户最佳安全实践">用户最佳安全实践</h1><p>人类使用物理的安全控制已经有数千年之久。相比之下，我们的数字化安全经验还不过 50 岁。现代通用的操作系统并不是十分安全，亦不特别适合用来存储数字金钱。我们的电脑通过一直相连的互联网长时间暴露在外，它们运行着成千上万来自他人的软件组件，这些软件往往可以不受约束地访问用户的文件。只要你电脑上所安装的许多软件里有一个恶意软件，就会对你的键盘和文件造成威胁，可以窃取存储在钱包应用中的​​所有比特币。要想保持电脑不中病毒和木马需要很高的计算机维护水平，而仅有小部分电脑用户能够做到。</p>
<p>尽管信息安全经过了数十年的研究和发展，数字资产在孜孜不倦的攻势下还是十分脆弱。纵使是像金融服务公司，情报机构或国防承包商这样拥有高度防护和限制的系统，也经常会被攻破。比特币创造了具有内在价值的数字资产，它可以被窃取，并立即转移给他人而无法撤回。这让黑客有了强烈的作案动机。至今为止，黑客都不得不在套现后更换身份信息或帐户口令，例如信用卡或银行账户。尽管掩饰和洗白这部分财务信息的难度不小，但越来越多的窃贼从于此道。而比特币使这个问题加剧了，因为它不需要掩饰或洗白，它本身就是具有内在价值的数字资产。</p>
<p>幸运的是，比特币也有着激励机制，以提高计算机的安全性。如前所述，计算机受威胁的风险是模糊的，间接的，而比特币让这些风险变得明确清晰。在电脑上保存比特币让用户时刻注意他们需要提高计算机的安全性，结果便是这使得比特币和其它数字货币得以传播和扩散，我们已经看到在黑客技术和安全解决方案双方的提升。简单来说，黑客现在有着一个非常诱人的目标，而用户也有明确的激励性去保卫自己。</p>
<p>在过去的三年里，随着比特币不断被接纳，一个直接的结果是，我们已经看到信息安全领域取得了巨大创新，例如硬件加密，密钥存储和硬件钱包，多重签名技术和数字托管。在下面的章节中，我们将研究各种实际用户安全中的实践经验。</p>
<h2 id="比特币物理存储">比特币物理存储</h2><p>相比数字信息的安全，大多数用户对物理安全更加熟悉，一个非常有效保护比特币的方法是，将它们转换为物理形式。比特币密钥不过是串长数字而已。这意味着它们可以以物理形式存储起来，如印在纸上或蚀刻成金属硬币上。这样保护密钥就变成了简单地保护印着比特币密钥的物理实体。一组打印在纸上的比特币密钥被称为“纸钱包”，有许多可以用来创建它们的免费工具。我个人将大部分（99％ 以上）的比特币存储在纸钱包上，并用 BIP0038 加密，复制了多份并锁在保险箱里。将比特币离线保存被称为冷存储，它是最有效的安全技术之一。冷存储系统是在一个离线系统（一个从来没有连接过互联网的系统）上生成密钥，并离线存储到纸上或者 U 盘等电子媒体。</p>
<h2 id="硬件钱包">硬件钱包</h2><p>从长远来看，比特币安全将越来越多地以硬件防篡改钱包的形式出现。与智能手机或台式电脑不同，一个比特币硬件钱包只有一个目的，安全地存储比特币。不像容易受害的常用软件那样，硬件钱包只提供了有限的接口，从而可以给非专业用户提供近乎万无一失的安全等级。我预期将看到硬件钱包成为比特币储存的主要方式。要想看硬件钱包的实例，请查阅 Trezor。</p>
<h2 id="平衡风险">平衡风险</h2><p>虽然大多数用户都非常关注比特币防盗，其实还有一个更大的风险存在。数据文件丢失的情况时有发生。如果比特币的数据也在其中，损失将会让人痛苦不堪。为了保护好比特币钱包，用户必须非常注意不要走得太远，以至于最终不慎将这些比特币丢失。在 2011 年 7 月，一个著名的比特币认知教育项目损失了近 7000 枚比特币。为了防止被盗窃，其主人采取了一系列复杂的操作去加密备份。结果他们不慎丢失了加密的密钥，使得备份变得毫无价值，白白失去了一大笔财富。这就像把钱埋在沙漠里，如果你保护比特币的方式太过了，你可能无法再次找回它。</p>
<h2 id="分散风险">分散风险</h2><p>你会将你的全部家当换成现金放在钱包里随身携带么？大多数人会认为这非常不明智，但比特币用户经常会将所有的比特币放在一个钱包里。用户应该将风险分散到多种多样的比特币钱包里。审慎的用户应该只留一小部分（或许低于 5%）的比特币在一个在线的或手机钱包，就像零用钱一样，其余的部分应该采用不同存储机制分散开来，诸如电脑钱包和离线（冷存储）。</p>
<h2 id="多重签名管理">多重签名管理</h2><p>当一个公司或个人持有大量比特币时，他们应该考虑采用多重签名的比特币地址。多重签名比特币地址需要多个签名才能支付，从而保证资金的安全。多重签名的密钥应存储在多个不同的地方，并由不同的人掌控。打个比方，在企业环境中，密钥应该分别生成并由若干公司管理人员持有，以确保没有任何一个人可以独自占有资金。多重签名的地址也可以提供冗余，例如一个人持有多个密钥，并将它们分别存储在不同的地方。</p>
<h2 id="存活能力">存活能力</h2><p>一个非常重要却又常常被忽视的安全性考虑是可用性，尤其是在密钥持有者丧失工作能力或死亡的情况下。比特币的用户被告知应该使用复杂的密码，并保证他们的密钥安全且不为他人所知。不幸的是，这种做法使得在用户无法解锁时，用户的家人几乎无法将该财产恢复。事实上，比特币用户的家人可能完全不知道这笔比特币资金的存在。</p>
<p>如果你有很多的比特币，你应该考虑与一个值得信赖的亲属或律师分享解密的细节。一个更复杂的比特币生还计划，可以通过设置多重签名，做好遗产规划，并通过专门的“数字资产执行者”律师处理后事。</p>
<h2 id="总结">总结</h2><p>比特币是一项全新的，前所未有的，复杂的技术。随着时间的推移，我们将开发出更好的安全工具，而且更容易被非专业人士使用的做法。而现在，比特币用户可以使用许多这里所讨论​​的技巧，享受高枕无忧的比特币生活。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前阵子李笑来老师在网上招人合译《Mastering Bitcoin》一书，受巴比特之邀自己也参与其中。由于当时时间有限，只翻译了最后的第十章。如今此书<a href="http://zhibimo.com/explore/Mastering-Bitcoin">初稿</a>已经公布于众，自己也在此整理一下留个备份。从此，我也算是出过书的人了哈哈。<br>]]>
    
    </summary>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/tags/bitcoin/"/>
    
      <category term="Book" scheme="http://imcoddy.github.io/tags/book/"/>
    
      <category term="Reading" scheme="http://imcoddy.github.io/tags/reading/"/>
    
      <category term="Translation" scheme="http://imcoddy.github.io/tags/translation/"/>
    
      <category term="Bitcoin" scheme="http://imcoddy.github.io/categories/bitcoin/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Leetcode Challenge]]></title>
    <link href="http://imcoddy.github.io/2015/05/19/the-leetcode-challenge/"/>
    <id>http://imcoddy.github.io/2015/05/19/the-leetcode-challenge/</id>
    <published>2015-05-19T12:06:28.000Z</published>
    <updated>2015-11-01T01:07:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近开始试着刷 <a href="https://leetcode.com/" target="_blank" rel="external">Leetcode</a> 了。倒也没有想太多，只是最近写的代码太多是查 API 调用，让人有了种沦为纯码农做体力活之感。虽然以前也曾有过算法无用论的想法，不过在工作了这一阵子之后，也慢慢开始体会到了数据结构和算法在实际生活中的实用。现在翻看一些相关文章，也不觉得算法像以前上课时那般枯燥了，偶尔居然有种拍案叫绝的感想。加上最近发现 Leetcode 支持的答题语言多了不少，还能支持用 Javascript。至此，还能有什么不去刷题的理由呢？</p>
<a id="more"></a>
<p>如果还有人不知道不知道 Leetcode 的大名，在这里引用<a href="http://coolshell.cn/articles/12052.html" target="_blank" rel="external">酷壳的文章</a>简单地介绍一下：“Leetcode 这个网站上的题都是一些经典的公司用来面试应聘者的面试题，很多人通过刷这些题来应聘一些喜欢面试算法的公司，比如：Google、微软、Facebook、Amazon 之类的这些公司，基本上是应试教育的功利主义。”</p>
<p>不过，与其报着这样功利的心态去用 Leetcode，不如把它当成一次很好的回顾自己数据结构和算法的挑战。至少，这是我刷了将近一半题目之后的感受:)</p>
<p>总体而言，Leetcode 上的题目难度并不算太大，主要分成两大类：一种为基础算法考察，主要包括常用的深度搜索 DFS，广度搜索 BFS，二分法查找 BS，动态规划 DP，两点趋中 TP 等，主要检查对基本数据结构的理解和掌握，基本上只要确定好算法和边界条件，基本上都能 AC。另一种则为数学编程题，除了找出相关的规律之外，更多需要考虑各种特别的测试案例，否则时常会因为考虑不周到而出现只能通过部分测试最后得到 Wrong Answer 的悲剧。</p>
<p>虽然难度不太，要想一次就能通过倒也不容易，因此对于每一道题也不能掉以轻心。而且，Leetcode 还将题目按解题思路归类贴了标签，同一道题也可以根据这个提示用多种方式来解决。现在回想起来，前阵子只是单纯为了刷题通过率做得有些囫囵吞枣了。改天根据题目的不同类型重新写一次，并能分析一下相关的复杂度，才算是真的把这题目做透吧。</p>
<p>另外，在使用 Leetcode 的过程中，也稍有一些不是太爽的地方：</p>
<p>一、Leetcode 没有提供空间的使用数据情况。有时为了单纯提高速度都直接各自 Hashmap 用起来，实际工作里这倒不是一个好习惯。</p>
<p>二、Runtime 时间相差较大。由于自己基本是用 JS 答题，虽然已经做好了速度不会太快的心理准备，不过就算是相同的代码，在运行时间有时会差上几百毫秒。有这一点上，C++ 的分布情况就显得正常得多了。</p>
<p>三、Discuss 里面并不太活跃。虽然基本每题都会有人分享解答，但上面回复点赞者的数量还是少了不少。看着有些人提交了问题一直没有人回复，感觉有点桑心哈。</p>
<p>自己相关的解题答案，全都提交到了这里：<a href="https://github.com/imcoddy/leetcode" target="_blank" rel="external">https://github.com/imcoddy/leetcode</a>。虽然离全部 AC 还有不小距离，不过今后会坚持更新，顺利的话，半年内应该能完成到自己满意的目标吧。</p>
<p>同时，为了使里面的代码格式统一，还另外用 Nodejs 写了个 <a href="https://github.com/imcoddy/leetcode-crawler" target="_blank" rel="external">小爬虫</a>，可以将题目和代码定义预先抓取到本地，省去了经常到网站上查找的麻烦（毕竟本地 grep 搜索要便利不少，也方便自己不定期更新 problemset ）。虽然功能还很简陋，不过已经能满足我的需求了，有兴趣的同学不妨一试。</p>
<p>最后，Leetcode 的相关资料网上很容易就能找到，@billryan 的这份<a href="https://github.com/billryan/algorithm-exercise" target="_blank" rel="external">总结</a>感觉相对做得完善一些，在这里顺便推荐一下。英文不错的同学还可以多关注一下 Leetcode 的<a href="http://articles.leetcode.com/" target="_blank" rel="external">博客</a>，里面的每一篇文章都值得细读一遍。嗯，我都有点再写个爬虫把里面的文章全部抓下来整理的冲动了 :P</p>
<p>最最后，让我们记住下面这句话：</p>
<blockquote>
<p>Language might not last, but algorithm will long live. Happy Leetcoding!</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近开始试着刷 <a href="https://leetcode.com/">Leetcode</a> 了。倒也没有想太多，只是最近写的代码太多是查 API 调用，让人有了种沦为纯码农做体力活之感。虽然以前也曾有过算法无用论的想法，不过在工作了这一阵子之后，也慢慢开始体会到了数据结构和算法在实际生活中的实用。现在翻看一些相关文章，也不觉得算法像以前上课时那般枯燥了，偶尔居然有种拍案叫绝的感想。加上最近发现 Leetcode 支持的答题语言多了不少，还能支持用 Javascript。至此，还能有什么不去刷题的理由呢？</p>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://imcoddy.github.io/tags/algorithm/"/>
    
      <category term="Interview" scheme="http://imcoddy.github.io/tags/interview/"/>
    
      <category term="Leetcode" scheme="http://imcoddy.github.io/tags/leetcode/"/>
    
      <category term="Programming" scheme="http://imcoddy.github.io/tags/programming/"/>
    
      <category term="Diary" scheme="http://imcoddy.github.io/categories/diary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Upgrade to Hexo 3]]></title>
    <link href="http://imcoddy.github.io/2015/05/17/upgrade-to-hexo-3/"/>
    <id>http://imcoddy.github.io/2015/05/17/upgrade-to-hexo-3/</id>
    <published>2015-05-17T00:45:42.000Z</published>
    <updated>2015-11-01T01:07:28.000Z</updated>
    <content type="html"><![CDATA[<p>转眼之间，又一晃半年多都没有打理博客了。 前一阵子，似乎进入了一个低潮。倒不是没有了感触，只是有时却又不知道如何说起。这样的状态的确不太好，是时候把这里重新拾起来了。</p>
<a id="more"></a>
<p>最近重新翻了一下李笑来的<a href="http://zhibimo.com/explore/ba-shi-jian-dang-zuo-peng-you" target="_blank" rel="external">《把时间当朋友》</a>，原因是看到他在推荐斯坦福公开课<a href="https://startupclass.co/courses/how-to-start-a-startup" target="_blank" rel="external">《How To Start A Startup》</a>之余，还几乎每天坚持更新自己的学习笔记整理成文并分享出来。有意思的是，这份学习笔记名为<a href="http://zhibimo.com/explore/growth" target="_blank" rel="external">《成长》</a>，而这种学习的成长心态，与《把时间当朋友》是一脉相承的。</p>
<p>是以再看这本书时，深深地感受到，坚持是多么的不容易。正如书中所说：</p>
<blockquote>
<p>在 ClipMine上，2015年3月18日，这套课程中的第一课，数字是这样的：<br>324K views | 2.4K likes<br>而第二十课的数字是这样的：<br>19.1K views | 113 likes<br>也就是说，仅有百分之六不到的人看完所有课程……要是用最终第二十课点赞的人数作为分子，用最初看第一课的人数作为分母，得出来的比例是万分之三……<br>想起来我过去讲课时常说的话，每期班第一课我都会说：<br>我看到你们目光炯炯，我知道你们刚刚决心重新做人……我倒是想知道你们能坚持多久？</p>
</blockquote>
<p>因此，空谈误国，实干兴邦。雄心壮志的话还是少说，静心做事才是王道。今天趁着把 Hexo 更新到 3 ，今后也坚持把自己的所思所想多用文字记录下来吧。</p>
<p>更新的方法其实没有太多好说的，参考<a href="https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0" target="_blank" rel="external">官方文档</a>就好了。比较可惜的是之前用的主题不能用了，现在默认的 langscape 主题不是太符合自己的口味。不过这个，改天再换了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转眼之间，又一晃半年多都没有打理博客了。 前一阵子，似乎进入了一个低潮。倒不是没有了感触，只是有时却又不知道如何说起。这样的状态的确不太好，是时候把这里重新拾起来了。</p>]]>
    
    </summary>
    
      <category term="Blog" scheme="http://imcoddy.github.io/tags/blog/"/>
    
      <category term="Hexo" scheme="http://imcoddy.github.io/tags/hexo/"/>
    
      <category term="Diary" scheme="http://imcoddy.github.io/categories/diary/"/>
    
  </entry>
  
</feed>